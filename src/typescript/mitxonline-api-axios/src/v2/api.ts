/* tslint:disable */
/* eslint-disable */
/**
 * MITx Online API
 * MIT public API
 *
 * The version of the OpenAPI document: 0.0.1 (v2)
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * * `anytime` - anytime * `dated` - dated
 * @export
 * @enum {string}
 */

export const AvailabilityEnum = {
    /**
    * anytime
    */
    Anytime: 'anytime',
    /**
    * dated
    */
    Dated: 'dated'
} as const;

export type AvailabilityEnum = typeof AvailabilityEnum[keyof typeof AvailabilityEnum];


/**
 * 
 * @export
 * @enum {string}
 */

export const BlankEnum = {
    Empty: ''
} as const;

export type BlankEnum = typeof BlankEnum[keyof typeof BlankEnum];


/**
 * Serializer for certificate pages, including overrides and signatory items.
 * @export
 * @interface CertificatePage
 */
export interface CertificatePage {
    /**
     * 
     * @type {number}
     * @memberof CertificatePage
     */
    'id': number;
    /**
     * 
     * @type {PageMeta}
     * @memberof CertificatePage
     */
    'meta': PageMeta;
    /**
     * 
     * @type {string}
     * @memberof CertificatePage
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CertificatePage
     */
    'product_name': string;
    /**
     * 
     * @type {string}
     * @memberof CertificatePage
     */
    'CEUs': string;
    /**
     * 
     * @type {Array<Override>}
     * @memberof CertificatePage
     */
    'overrides': Array<Override>;
    /**
     * 
     * @type {Array<SignatoryItem>}
     * @memberof CertificatePage
     */
    'signatory_items': Array<SignatoryItem>;
}
/**
 * Serializer for a list of certificate pages.
 * @export
 * @interface CertificatePageList
 */
export interface CertificatePageList {
    /**
     * 
     * @type {PageListMeta}
     * @memberof CertificatePageList
     */
    'meta': PageListMeta;
    /**
     * 
     * @type {Array<CertificatePage>}
     * @memberof CertificatePageList
     */
    'items': Array<CertificatePage>;
}
/**
 * Extends the CertificatePageSerializer to work with a model object.
 * @export
 * @interface CertificatePageModel
 */
export interface CertificatePageModel {
    /**
     * 
     * @type {number}
     * @memberof CertificatePageModel
     */
    'id': number;
    /**
     * 
     * @type {PageMetaModel}
     * @memberof CertificatePageModel
     */
    'meta': PageMetaModel;
    /**
     * 
     * @type {string}
     * @memberof CertificatePageModel
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CertificatePageModel
     */
    'product_name': string;
    /**
     * 
     * @type {string}
     * @memberof CertificatePageModel
     */
    'CEUs': string;
    /**
     * 
     * @type {Array<Override>}
     * @memberof CertificatePageModel
     */
    'overrides': Array<Override>;
    /**
     * 
     * @type {Array<SignatoryItem>}
     * @memberof CertificatePageModel
     */
    'signatory_items': Array<SignatoryItem>;
}
/**
 * Serializer for starting a user email change
 * @export
 * @interface ChangeEmailRequestCreate
 */
export interface ChangeEmailRequestCreate {
    /**
     * 
     * @type {string}
     * @memberof ChangeEmailRequestCreate
     */
    'new_email': string;
}
/**
 * Serializer for starting a user email change
 * @export
 * @interface ChangeEmailRequestCreateRequest
 */
export interface ChangeEmailRequestCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof ChangeEmailRequestCreateRequest
     */
    'new_email': string;
    /**
     * 
     * @type {string}
     * @memberof ChangeEmailRequestCreateRequest
     */
    'password': string;
}
/**
 * Serializer for confirming a user email change
 * @export
 * @interface ChangeEmailRequestUpdate
 */
export interface ChangeEmailRequestUpdate {
    /**
     * 
     * @type {boolean}
     * @memberof ChangeEmailRequestUpdate
     */
    'confirmed': boolean;
}
/**
 * Serializer for confirming a user email change
 * @export
 * @interface ChangeEmailRequestUpdateRequest
 */
export interface ChangeEmailRequestUpdateRequest {
    /**
     * 
     * @type {boolean}
     * @memberof ChangeEmailRequestUpdateRequest
     */
    'confirmed': boolean;
}
/**
 * * `None` - ---- * `1` - Small/Start-up (1+ employees) * `9` - Small/Home office (1-9 employees) * `99` - Small (10-99 employees) * `999` - Small to medium-sized (100-999 employees) * `9999` - Medium-sized (1000-9999 employees) * `10000` - Large Enterprise (10,000+ employees) * `0` - Other (N/A or Don\'t know)
 * @export
 * @enum {string}
 */

export const CompanySizeEnum = {
    /**
    * Small/Start-up (1+ employees)
    */
    NUMBER_1: 1,
    /**
    * Small/Home office (1-9 employees)
    */
    NUMBER_9: 9,
    /**
    * Small (10-99 employees)
    */
    NUMBER_99: 99,
    /**
    * Small to medium-sized (100-999 employees)
    */
    NUMBER_999: 999,
    /**
    * Medium-sized (1000-9999 employees)
    */
    NUMBER_9999: 9999,
    /**
    * Large Enterprise (10,000+ employees)
    */
    NUMBER_10000: 10000,
    /**
    * Other (N/A or Don&#39;t know)
    */
    NUMBER_0: 0
} as const;

export type CompanySizeEnum = typeof CompanySizeEnum[keyof typeof CompanySizeEnum];


/**
 * Serializer for the ContractPage model.
 * @export
 * @interface ContractPage
 */
export interface ContractPage {
    /**
     * 
     * @type {number}
     * @memberof ContractPage
     */
    'id': number;
    /**
     * The name of the contract.
     * @type {string}
     * @memberof ContractPage
     */
    'name': string;
    /**
     * Any useful extra information about the contract.
     * @type {string}
     * @memberof ContractPage
     */
    'description': string;
    /**
     * 
     * @type {IntegrationTypeEnum}
     * @memberof ContractPage
     */
    'integration_type': IntegrationTypeEnum;
    /**
     * The organization this contract is with.
     * @type {number}
     * @memberof ContractPage
     */
    'organization': number;
    /**
     * The start date of the contract.
     * @type {string}
     * @memberof ContractPage
     */
    'contract_start': string | null;
    /**
     * The end date of the contract.
     * @type {string}
     * @memberof ContractPage
     */
    'contract_end': string | null;
    /**
     * Whether this contract is active or not. Date rules still apply.
     * @type {boolean}
     * @memberof ContractPage
     */
    'active': boolean;
    /**
     * The name of the page as it will appear in URLs e.g http://domain.com/blog/[my-slug]/
     * @type {string}
     * @memberof ContractPage
     */
    'slug': string;
}


/**
 * Serializer for pycountry countries, with states for US/CA
 * @export
 * @interface Country
 */
export interface Country {
    /**
     * Get the country alpha_2 code
     * @type {string}
     * @memberof Country
     */
    'code': string;
    /**
     * Get the country name (common name preferred if available)
     * @type {string}
     * @memberof Country
     */
    'name': string;
    /**
     * Get a list of states/provinces if USA or Canada
     * @type {Array<{ [key: string]: any; }>}
     * @memberof Country
     */
    'states': Array<{ [key: string]: any; }>;
}
/**
 * Course model serializer
 * @export
 * @interface Course
 */
export interface Course {
    /**
     * 
     * @type {number}
     * @memberof Course
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    'readable_id': string;
    /**
     * Get next run id
     * @type {number}
     * @memberof Course
     */
    'next_run_id': number | null;
    /**
     * 
     * @type {Array<Department>}
     * @memberof Course
     */
    'departments': Array<Department>;
    /**
     * 
     * @type {CoursePage}
     * @memberof Course
     */
    'page': CoursePage;
    /**
     * 
     * @type {Program}
     * @memberof Course
     */
    'programs': Program | null;
}
/**
 * Course page model serializer
 * @export
 * @interface CoursePage
 */
export interface CoursePage {
    /**
     * Serializes the source of the feature_image
     * @type {string}
     * @memberof CoursePage
     */
    'feature_image_src': string;
    /**
     * 
     * @type {string}
     * @memberof CoursePage
     */
    'page_url': string;
    /**
     * Get cleaned description text.
     * @type {string}
     * @memberof CoursePage
     */
    'description': string;
    /**
     * 
     * @type {boolean}
     * @memberof CoursePage
     */
    'live': boolean;
    /**
     * Get cleaned length text.
     * @type {string}
     * @memberof CoursePage
     */
    'length': string;
    /**
     * Get cleaned effort text.
     * @type {string}
     * @memberof CoursePage
     */
    'effort': string | null;
    /**
     * 
     * @type {string}
     * @memberof CoursePage
     */
    'financial_assistance_form_url': string;
    /**
     * Get the current price of the course product.
     * @type {number}
     * @memberof CoursePage
     */
    'current_price': number | null;
    /**
     * Get instructor information
     * @type {Array<any>}
     * @memberof CoursePage
     */
    'instructors': Array<any>;
}
/**
 * Serializer for individual course page items, including all relevant fields.
 * @export
 * @interface CoursePageItem
 */
export interface CoursePageItem {
    /**
     * 
     * @type {number}
     * @memberof CoursePageItem
     */
    'id': number;
    /**
     * 
     * @type {PageMeta}
     * @memberof CoursePageItem
     */
    'meta': PageMeta;
    /**
     * The page title as you\'d like it to be seen by the public
     * @type {string}
     * @memberof CoursePageItem
     */
    'title': string;
    /**
     * The description shown on the home page and product page.
     * @type {string}
     * @memberof CoursePageItem
     */
    'description': string;
    /**
     * A short description indicating how long it takes to complete (e.g. \'4 weeks\').
     * @type {string}
     * @memberof CoursePageItem
     */
    'length': string;
    /**
     * A short description indicating how much effort is required (e.g. 1-3 hours per week).
     * @type {string}
     * @memberof CoursePageItem
     */
    'effort': string | null;
    /**
     * The minimum number of hours per week required to complete the course.
     * @type {string}
     * @memberof CoursePageItem
     */
    'min_weekly_hours': string;
    /**
     * The maximum number of hours per week required to complete the course.
     * @type {string}
     * @memberof CoursePageItem
     */
    'max_weekly_hours': string;
    /**
     * The minimum number of weeks required to complete the course/program.
     * @type {number}
     * @memberof CoursePageItem
     */
    'min_weeks': number | null;
    /**
     * The maximum number of weeks required to complete the course/program.
     * @type {number}
     * @memberof CoursePageItem
     */
    'max_weeks': number | null;
    /**
     * 
     * @type {Array<PriceItem>}
     * @memberof CoursePageItem
     */
    'price': Array<PriceItem>;
    /**
     * Specify the minimum product price. This is used by MIT Learn.
     * @type {number}
     * @memberof CoursePageItem
     */
    'min_price': number | null;
    /**
     * Specify the maximum product price. This is used by MIT Learn.
     * @type {number}
     * @memberof CoursePageItem
     */
    'max_price': number | null;
    /**
     * A short description indicating prerequisites of this course/program.
     * @type {string}
     * @memberof CoursePageItem
     */
    'prerequisites': string | null;
    /**
     * URL a relevant FAQ page or entry for the course/program.
     * @type {string}
     * @memberof CoursePageItem
     */
    'faq_url': string | null;
    /**
     * Details about this course/program.
     * @type {string}
     * @memberof CoursePageItem
     */
    'about': string | null;
    /**
     * What you will learn from this course.
     * @type {string}
     * @memberof CoursePageItem
     */
    'what_you_learn': string | null;
    /**
     * 
     * @type {FeatureImage}
     * @memberof CoursePageItem
     */
    'feature_image': FeatureImage;
    /**
     * URL to the video to be displayed for this course/program. It can be an HLS or Youtube video URL.
     * @type {string}
     * @memberof CoursePageItem
     */
    'video_url': string | null;
    /**
     * The title text to display in the faculty cards section of the product page.
     * @type {string}
     * @memberof CoursePageItem
     */
    'faculty_section_title': string | null;
    /**
     * 
     * @type {Array<Faculty>}
     * @memberof CoursePageItem
     */
    'faculty': Array<Faculty>;
    /**
     * 
     * @type {CertificatePage}
     * @memberof CoursePageItem
     */
    'certificate_page': CertificatePage | null;
    /**
     * 
     * @type {V2Course}
     * @memberof CoursePageItem
     */
    'course_details': V2Course;
    /**
     * 
     * @type {Array<Topic>}
     * @memberof CoursePageItem
     */
    'topic_list': Array<Topic>;
    /**
     * If true, Learn should include this in its catalog.
     * @type {boolean}
     * @memberof CoursePageItem
     */
    'include_in_learn_catalog': boolean | null;
    /**
     * If true, allow the AI chatbots to ingest the course\'s content files.
     * @type {boolean}
     * @memberof CoursePageItem
     */
    'ingest_content_files_for_ai': boolean | null;
}
/**
 * Serializer for a list of course pages, including metadata and items.
 * @export
 * @interface CoursePageList
 */
export interface CoursePageList {
    /**
     * 
     * @type {PageListMeta}
     * @memberof CoursePageList
     */
    'meta': PageListMeta;
    /**
     * 
     * @type {Array<CoursePageItem>}
     * @memberof CoursePageList
     */
    'items': Array<CoursePageItem>;
}
/**
 * Course model serializer
 * @export
 * @interface CourseRequest
 */
export interface CourseRequest {
    /**
     * 
     * @type {string}
     * @memberof CourseRequest
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CourseRequest
     */
    'readable_id': string;
}
/**
 * CourseRunCertificate model serializer
 * @export
 * @interface CourseRunCertificate
 */
export interface CourseRunCertificate {
    /**
     * 
     * @type {string}
     * @memberof CourseRunCertificate
     */
    'uuid': string;
    /**
     * Get the link at which this certificate will be served Format: /certificate/<uuid>/ Example: /certificate/93ebd74e-5f88-4b47-bb09-30a6d575328f/
     * @type {string}
     * @memberof CourseRunCertificate
     */
    'link': string;
}
/**
 * CourseRunEnrollment model serializer
 * @export
 * @interface CourseRunEnrollment
 */
export interface CourseRunEnrollment {
    /**
     * 
     * @type {V1CourseRunWithCourse}
     * @memberof CourseRunEnrollment
     */
    'run': V1CourseRunWithCourse;
    /**
     * 
     * @type {number}
     * @memberof CourseRunEnrollment
     */
    'id': number;
    /**
     * 
     * @type {boolean}
     * @memberof CourseRunEnrollment
     */
    'edx_emails_subscription'?: boolean;
    /**
     * 
     * @type {CourseRunCertificate}
     * @memberof CourseRunEnrollment
     */
    'certificate': CourseRunCertificate | null;
    /**
     * 
     * @type {EnrollmentModeEnum}
     * @memberof CourseRunEnrollment
     */
    'enrollment_mode': EnrollmentModeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof CourseRunEnrollment
     */
    'approved_flexible_price_exists': boolean;
    /**
     * 
     * @type {Array<CourseRunGrade>}
     * @memberof CourseRunEnrollment
     */
    'grades': Array<CourseRunGrade>;
}


/**
 * CourseRunEnrollment model serializer
 * @export
 * @interface CourseRunEnrollmentRequest
 */
export interface CourseRunEnrollmentRequest {
    /**
     * 
     * @type {boolean}
     * @memberof CourseRunEnrollmentRequest
     */
    'edx_emails_subscription'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CourseRunEnrollmentRequest
     */
    'run_id': number;
}
/**
 * CourseRunEnrollment model serializer
 * @export
 * @interface CourseRunEnrollmentRequestV2
 */
export interface CourseRunEnrollmentRequestV2 {
    /**
     * 
     * @type {V2CourseRunWithCourse}
     * @memberof CourseRunEnrollmentRequestV2
     */
    'run': V2CourseRunWithCourse;
    /**
     * 
     * @type {number}
     * @memberof CourseRunEnrollmentRequestV2
     */
    'id': number;
    /**
     * 
     * @type {boolean}
     * @memberof CourseRunEnrollmentRequestV2
     */
    'edx_emails_subscription'?: boolean;
    /**
     * 
     * @type {CourseRunCertificate}
     * @memberof CourseRunEnrollmentRequestV2
     */
    'certificate': CourseRunCertificate | null;
    /**
     * 
     * @type {EnrollmentModeEnum}
     * @memberof CourseRunEnrollmentRequestV2
     */
    'enrollment_mode': EnrollmentModeEnum;
    /**
     * 
     * @type {boolean}
     * @memberof CourseRunEnrollmentRequestV2
     */
    'approved_flexible_price_exists': boolean;
    /**
     * 
     * @type {Array<CourseRunGrade>}
     * @memberof CourseRunEnrollmentRequestV2
     */
    'grades': Array<CourseRunGrade>;
    /**
     * 
     * @type {number}
     * @memberof CourseRunEnrollmentRequestV2
     */
    'b2b_organization_id': number | null;
    /**
     * 
     * @type {number}
     * @memberof CourseRunEnrollmentRequestV2
     */
    'b2b_contract_id': number | null;
}


/**
 * CourseRunEnrollment model serializer
 * @export
 * @interface CourseRunEnrollmentRequestV2Request
 */
export interface CourseRunEnrollmentRequestV2Request {
    /**
     * 
     * @type {boolean}
     * @memberof CourseRunEnrollmentRequestV2Request
     */
    'edx_emails_subscription'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof CourseRunEnrollmentRequestV2Request
     */
    'run_id': number;
}
/**
 * CourseRunGrade serializer
 * @export
 * @interface CourseRunGrade
 */
export interface CourseRunGrade {
    /**
     * 
     * @type {number}
     * @memberof CourseRunGrade
     */
    'grade': number;
    /**
     * 
     * @type {string}
     * @memberof CourseRunGrade
     */
    'letter_grade'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CourseRunGrade
     */
    'passed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CourseRunGrade
     */
    'set_by_admin'?: boolean;
    /**
     * Returns the grade field value as a number out of 100 (or None if the value is None)
     * @type {number}
     * @memberof CourseRunGrade
     */
    'grade_percent': number;
}
/**
 * CourseRun model serializer
 * @export
 * @interface CourseRunV2
 */
export interface CourseRunV2 {
    /**
     * The title of the course. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof CourseRunV2
     */
    'title': string;
    /**
     * The day the course begins. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof CourseRunV2
     */
    'start_date'?: string | null;
    /**
     * The last day the course is active. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof CourseRunV2
     */
    'end_date'?: string | null;
    /**
     * The first day students can enroll. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof CourseRunV2
     */
    'enrollment_start'?: string | null;
    /**
     * The last day students can enroll. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof CourseRunV2
     */
    'enrollment_end'?: string | null;
    /**
     * The date beyond which the learner should not see link to this course run on their dashboard.
     * @type {string}
     * @memberof CourseRunV2
     */
    'expiration_date'?: string | null;
    /**
     * Get the courseware URL
     * @type {string}
     * @memberof CourseRunV2
     */
    'courseware_url': string | null;
    /**
     * 
     * @type {string}
     * @memberof CourseRunV2
     */
    'courseware_id': string;
    /**
     * The day certificates should be available to users. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof CourseRunV2
     */
    'certificate_available_date'?: string | null;
    /**
     * The date beyond which the learner can not enroll in paid course mode.
     * @type {string}
     * @memberof CourseRunV2
     */
    'upgrade_deadline'?: string | null;
    /**
     * Check if the course run is upgradable
     * @type {boolean}
     * @memberof CourseRunV2
     */
    'is_upgradable': boolean;
    /**
     * Check if the course run is enrollable
     * @type {boolean}
     * @memberof CourseRunV2
     */
    'is_enrollable': boolean;
    /**
     * Check if the course run is archived
     * @type {boolean}
     * @memberof CourseRunV2
     */
    'is_archived': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CourseRunV2
     */
    'is_self_paced'?: boolean;
    /**
     * A string that identifies the set of runs that this run belongs to (example: \'R2\')
     * @type {string}
     * @memberof CourseRunV2
     */
    'run_tag': string;
    /**
     * 
     * @type {number}
     * @memberof CourseRunV2
     */
    'id': number;
    /**
     * 
     * @type {boolean}
     * @memberof CourseRunV2
     */
    'live'?: boolean;
    /**
     * Get the course number
     * @type {string}
     * @memberof CourseRunV2
     */
    'course_number': string;
    /**
     * 
     * @type {Array<ProductFlexibilePrice>}
     * @memberof CourseRunV2
     */
    'products': Array<ProductFlexibilePrice>;
    /**
     * 
     * @type {boolean}
     * @memberof CourseRunV2
     */
    'approved_flexible_price_exists': boolean;
    /**
     * 
     * @type {number}
     * @memberof CourseRunV2
     */
    'b2b_contract'?: number | null;
}
/**
 * Course model serializer - also serializes child course runs
 * @export
 * @interface CourseWithCourseRunsSerializerV2
 */
export interface CourseWithCourseRunsSerializerV2 {
    /**
     * 
     * @type {number}
     * @memberof CourseWithCourseRunsSerializerV2
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof CourseWithCourseRunsSerializerV2
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CourseWithCourseRunsSerializerV2
     */
    'readable_id': string;
    /**
     * Get next run id
     * @type {number}
     * @memberof CourseWithCourseRunsSerializerV2
     */
    'next_run_id': number | null;
    /**
     * 
     * @type {Array<Department>}
     * @memberof CourseWithCourseRunsSerializerV2
     */
    'departments': Array<Department>;
    /**
     * 
     * @type {CoursePage}
     * @memberof CourseWithCourseRunsSerializerV2
     */
    'page': CoursePage;
    /**
     * 
     * @type {Array<{ [key: string]: any; }>}
     * @memberof CourseWithCourseRunsSerializerV2
     */
    'programs': Array<{ [key: string]: any; }> | null;
    /**
     * List topics of a course
     * @type {Array<{ [key: string]: any; }>}
     * @memberof CourseWithCourseRunsSerializerV2
     */
    'topics': Array<{ [key: string]: any; }>;
    /**
     * 
     * @type {string}
     * @memberof CourseWithCourseRunsSerializerV2
     */
    'certificate_type': string;
    /**
     * Check if the prerequisites field is populated in the course page CMS. Returns:     bool: True when the prerequisites field is populated in the course page CMS.  False otherwise.
     * @type {boolean}
     * @memberof CourseWithCourseRunsSerializerV2
     */
    'required_prerequisites': boolean;
    /**
     * Get the duration of the course from the course page CMS.
     * @type {string}
     * @memberof CourseWithCourseRunsSerializerV2
     */
    'duration': string;
    /**
     * Get the min weeks of the course from the CMS page.
     * @type {number}
     * @memberof CourseWithCourseRunsSerializerV2
     */
    'min_weeks': number | null;
    /**
     * Get the max weeks of the course from the CMS page.
     * @type {number}
     * @memberof CourseWithCourseRunsSerializerV2
     */
    'max_weeks': number | null;
    /**
     * Get the min price of the product from the CMS page.
     * @type {number}
     * @memberof CourseWithCourseRunsSerializerV2
     */
    'min_price': number | null;
    /**
     * Get the max price of the product from the CMS page.
     * @type {number}
     * @memberof CourseWithCourseRunsSerializerV2
     */
    'max_price': number | null;
    /**
     * Get the time commitment of the course from the course page CMS.
     * @type {string}
     * @memberof CourseWithCourseRunsSerializerV2
     */
    'time_commitment': string | null;
    /**
     * Get course availability
     * @type {string}
     * @memberof CourseWithCourseRunsSerializerV2
     */
    'availability': string;
    /**
     * Get the min weekly hours of the course from the course page CMS.
     * @type {string}
     * @memberof CourseWithCourseRunsSerializerV2
     */
    'min_weekly_hours': string | null;
    /**
     * Get the max weekly hours of the course from the course page CMS.
     * @type {string}
     * @memberof CourseWithCourseRunsSerializerV2
     */
    'max_weekly_hours': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CourseWithCourseRunsSerializerV2
     */
    'include_in_learn_catalog': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CourseWithCourseRunsSerializerV2
     */
    'ingest_content_files_for_ai': boolean;
    /**
     * 
     * @type {Array<CourseRunV2>}
     * @memberof CourseWithCourseRunsSerializerV2
     */
    'courseruns': Array<CourseRunV2>;
}
/**
 * Serializer for the result from create_b2b_enrollment.  There\'s always a result, and it should be one of the B2B messages that are defined in main.constants. The other fields appear or not depending on the result type.
 * @export
 * @interface CreateB2BEnrollment
 */
export interface CreateB2BEnrollment {
    /**
     * 
     * @type {ResultEnum}
     * @memberof CreateB2BEnrollment
     */
    'result': ResultEnum;
    /**
     * 
     * @type {number}
     * @memberof CreateB2BEnrollment
     */
    'order': number;
    /**
     * 
     * @type {string}
     * @memberof CreateB2BEnrollment
     */
    'price': string;
    /**
     * 
     * @type {GenerateCheckoutPayload}
     * @memberof CreateB2BEnrollment
     */
    'checkout_result'?: GenerateCheckoutPayload;
}


/**
 * Department model serializer
 * @export
 * @interface Department
 */
export interface Department {
    /**
     * 
     * @type {string}
     * @memberof Department
     */
    'name': string;
}
/**
 * Department model serializer
 * @export
 * @interface DepartmentRequest
 */
export interface DepartmentRequest {
    /**
     * 
     * @type {string}
     * @memberof DepartmentRequest
     */
    'name': string;
}
/**
 * CourseRun model serializer that includes the number of courses and programs associated with each departments
 * @export
 * @interface DepartmentWithCount
 */
export interface DepartmentWithCount {
    /**
     * 
     * @type {string}
     * @memberof DepartmentWithCount
     */
    'name': string;
    /**
     * 
     * @type {number}
     * @memberof DepartmentWithCount
     */
    'courses': number;
    /**
     * 
     * @type {number}
     * @memberof DepartmentWithCount
     */
    'programs': number;
}
/**
 * Department model serializer that includes the number of courses and programs associated with each
 * @export
 * @interface DepartmentWithCoursesAndPrograms
 */
export interface DepartmentWithCoursesAndPrograms {
    /**
     * 
     * @type {number}
     * @memberof DepartmentWithCoursesAndPrograms
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof DepartmentWithCoursesAndPrograms
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof DepartmentWithCoursesAndPrograms
     */
    'slug': string;
    /**
     * 
     * @type {Array<any>}
     * @memberof DepartmentWithCoursesAndPrograms
     */
    'course_ids': Array<any>;
    /**
     * 
     * @type {Array<any>}
     * @memberof DepartmentWithCoursesAndPrograms
     */
    'program_ids': Array<any>;
}
/**
 * 
 * @export
 * @interface Discount
 */
export interface Discount {
    /**
     * 
     * @type {number}
     * @memberof Discount
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Discount
     */
    'amount': string;
    /**
     * 
     * @type {boolean}
     * @memberof Discount
     */
    'automatic'?: boolean;
    /**
     * 
     * @type {DiscountTypeEnum}
     * @memberof Discount
     */
    'discount_type': DiscountTypeEnum;
    /**
     * 
     * @type {RedemptionTypeEnum}
     * @memberof Discount
     */
    'redemption_type': RedemptionTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof Discount
     */
    'max_redemptions'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Discount
     */
    'discount_code': string;
    /**
     * 
     * @type {PaymentTypeEnum}
     * @memberof Discount
     */
    'payment_type'?: PaymentTypeEnum | null;
    /**
     * Returns True if the discount has been redeemed
     * @type {boolean}
     * @memberof Discount
     */
    'is_redeemed': boolean;
    /**
     * If set, this discount code will not be redeemable before this date.
     * @type {string}
     * @memberof Discount
     */
    'activation_date'?: string | null;
    /**
     * If set, this discount code will not be redeemable after this date.
     * @type {string}
     * @memberof Discount
     */
    'expiration_date'?: string | null;
}


/**
 * * `percent-off` - percent-off * `dollars-off` - dollars-off * `fixed-price` - fixed-price
 * @export
 * @enum {string}
 */

export const DiscountTypeEnum = {
    /**
    * percent-off
    */
    PercentOff: 'percent-off',
    /**
    * dollars-off
    */
    DollarsOff: 'dollars-off',
    /**
    * fixed-price
    */
    FixedPrice: 'fixed-price'
} as const;

export type DiscountTypeEnum = typeof DiscountTypeEnum[keyof typeof DiscountTypeEnum];


/**
 * * `audit` - audit * `verified` - verified
 * @export
 * @enum {string}
 */

export const EnrollmentModeEnum = {
    /**
    * audit
    */
    Audit: 'audit',
    /**
    * verified
    */
    Verified: 'verified'
} as const;

export type EnrollmentModeEnum = typeof EnrollmentModeEnum[keyof typeof EnrollmentModeEnum];


/**
 * Serializer for faculty details used in course pages.
 * @export
 * @interface Faculty
 */
export interface Faculty {
    /**
     * 
     * @type {number}
     * @memberof Faculty
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Faculty
     */
    'instructor_name': string;
    /**
     * 
     * @type {string}
     * @memberof Faculty
     */
    'instructor_title': string;
    /**
     * 
     * @type {string}
     * @memberof Faculty
     */
    'instructor_bio_short': string;
    /**
     * 
     * @type {string}
     * @memberof Faculty
     */
    'instructor_bio_long': string;
    /**
     * 
     * @type {string}
     * @memberof Faculty
     */
    'feature_image_src': string;
}
/**
 * Serializer for feature images used in course pages.
 * @export
 * @interface FeatureImage
 */
export interface FeatureImage {
    /**
     * 
     * @type {string}
     * @memberof FeatureImage
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof FeatureImage
     */
    'image_url': string;
    /**
     * 
     * @type {number}
     * @memberof FeatureImage
     */
    'height': number;
    /**
     * 
     * @type {number}
     * @memberof FeatureImage
     */
    'width': number;
}
/**
 * * `m` - Male * `f` - Female * `t` - Transgender * `nb` - Non-binary/non-conforming * `o` - Other/Prefer Not to Say
 * @export
 * @enum {string}
 */

export const GenderEnum = {
    /**
    * Male
    */
    M: 'm',
    /**
    * Female
    */
    F: 'f',
    /**
    * Transgender
    */
    T: 't',
    /**
    * Non-binary/non-conforming
    */
    Nb: 'nb',
    /**
    * Other/Prefer Not to Say
    */
    O: 'o'
} as const;

export type GenderEnum = typeof GenderEnum[keyof typeof GenderEnum];


/**
 * Serializer for the result from ecommerce.api.generate_checkout_payload.  The B2B enrollment API will return the result of the checkout call if the user needs to pay for the cart because of an error creating the checkout payload. In that case, we really just need the error states; it will also include a HttpResponseRedirect that we don\'t really care about for the API\'s purposes.
 * @export
 * @interface GenerateCheckoutPayload
 */
export interface GenerateCheckoutPayload {
    /**
     * 
     * @type {boolean}
     * @memberof GenerateCheckoutPayload
     */
    'country_blocked'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof GenerateCheckoutPayload
     */
    'purchased_same_courserun'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof GenerateCheckoutPayload
     */
    'purchased_non_upgradeable_courserun'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof GenerateCheckoutPayload
     */
    'invalid_discounts'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof GenerateCheckoutPayload
     */
    'no_checkout'?: boolean | null;
}
/**
 * * `None` - ---- * `Doctorate` - Doctorate * `Master\'s or professional degree` - Master\'s or professional degree * `Bachelor\'s degree` - Bachelor\'s degree * `Associate degree` - Associate degree * `Secondary/high school` - Secondary/high school * `Junior secondary/junior high/middle school` - Junior secondary/junior high/middle school * `Elementary/primary school` - Elementary/primary school * `No formal education` - No formal education * `Other education` - Other education
 * @export
 * @enum {string}
 */

export const HighestEducationEnum = {
    /**
    * Doctorate
    */
    Doctorate: 'Doctorate',
    /**
    * Master&#39;s or professional degree
    */
    MastersOrProfessionalDegree: 'Master\'s or professional degree',
    /**
    * Bachelor&#39;s degree
    */
    BachelorsDegree: 'Bachelor\'s degree',
    /**
    * Associate degree
    */
    AssociateDegree: 'Associate degree',
    /**
    * Secondary/high school
    */
    SecondaryHighSchool: 'Secondary/high school',
    /**
    * Junior secondary/junior high/middle school
    */
    JuniorSecondaryJuniorHighMiddleSchool: 'Junior secondary/junior high/middle school',
    /**
    * Elementary/primary school
    */
    ElementaryPrimarySchool: 'Elementary/primary school',
    /**
    * No formal education
    */
    NoFormalEducation: 'No formal education',
    /**
    * Other education
    */
    OtherEducation: 'Other education'
} as const;

export type HighestEducationEnum = typeof HighestEducationEnum[keyof typeof HighestEducationEnum];


/**
 * * `sso` - SSO * `non-sso` - Non-SSO
 * @export
 * @enum {string}
 */

export const IntegrationTypeEnum = {
    /**
    * SSO
    */
    Sso: 'sso',
    /**
    * Non-SSO
    */
    NonSso: 'non-sso'
} as const;

export type IntegrationTypeEnum = typeof IntegrationTypeEnum[keyof typeof IntegrationTypeEnum];


/**
 * 
 * @export
 * @interface LearnerProgramRecordShare
 */
export interface LearnerProgramRecordShare {
    /**
     * 
     * @type {string}
     * @memberof LearnerProgramRecordShare
     */
    'share_uuid': string;
    /**
     * 
     * @type {string}
     * @memberof LearnerProgramRecordShare
     */
    'created_on': string;
    /**
     * 
     * @type {string}
     * @memberof LearnerProgramRecordShare
     */
    'updated_on': string;
    /**
     * 
     * @type {boolean}
     * @memberof LearnerProgramRecordShare
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof LearnerProgramRecordShare
     */
    'user': number;
    /**
     * 
     * @type {number}
     * @memberof LearnerProgramRecordShare
     */
    'program': number;
    /**
     * 
     * @type {number}
     * @memberof LearnerProgramRecordShare
     */
    'partner_school'?: number | null;
}
/**
 * Gathers the various data needed to display the learner\'s program record. Pass the program you want the record for and attach the learner via context object.
 * @export
 * @interface LearnerRecord
 */
export interface LearnerRecord {
    /**
     * User information including name, email, and username
     * @type {{ [key: string]: string; }}
     * @memberof LearnerRecord
     */
    'user': { [key: string]: string; };
    /**
     * Program details including title, readable_id, courses, and requirements
     * @type {{ [key: string]: { [key: string]: any; }; }}
     * @memberof LearnerRecord
     */
    'program': { [key: string]: { [key: string]: any; }; };
    /**
     * Active program record shares for this user
     * @type {Array<LearnerProgramRecordShare>}
     * @memberof LearnerRecord
     */
    'sharing': Array<LearnerProgramRecordShare>;
    /**
     * List of partner schools
     * @type {Array<PartnerSchool>}
     * @memberof LearnerRecord
     */
    'partner_schools': Array<PartnerSchool>;
}
/**
 * Serializer for legal address
 * @export
 * @interface LegalAddress
 */
export interface LegalAddress {
    /**
     * 
     * @type {string}
     * @memberof LegalAddress
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof LegalAddress
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof LegalAddress
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof LegalAddress
     */
    'state'?: string | null;
}
/**
 * Serializer for legal address
 * @export
 * @interface LegalAddressRequest
 */
export interface LegalAddressRequest {
    /**
     * 
     * @type {string}
     * @memberof LegalAddressRequest
     */
    'first_name': string;
    /**
     * 
     * @type {string}
     * @memberof LegalAddressRequest
     */
    'last_name': string;
    /**
     * 
     * @type {string}
     * @memberof LegalAddressRequest
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof LegalAddressRequest
     */
    'state'?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const NullEnum = {
    Null: 'null'
} as const;

export type NullEnum = typeof NullEnum[keyof typeof NullEnum];


/**
 * Serializer for the OrganizationPage model.
 * @export
 * @interface OrganizationPage
 */
export interface OrganizationPage {
    /**
     * 
     * @type {number}
     * @memberof OrganizationPage
     */
    'id': number;
    /**
     * The name of the organization
     * @type {string}
     * @memberof OrganizationPage
     */
    'name': string;
    /**
     * Any useful extra information about the organization
     * @type {string}
     * @memberof OrganizationPage
     */
    'description': string;
    /**
     * The organization\'s logo. Will be displayed in the app in various places.
     * @type {string}
     * @memberof OrganizationPage
     */
    'logo': string;
    /**
     * The name of the page as it will appear in URLs e.g http://domain.com/blog/[my-slug]/
     * @type {string}
     * @memberof OrganizationPage
     */
    'slug': string;
    /**
     * 
     * @type {Array<ContractPage>}
     * @memberof OrganizationPage
     */
    'contracts': Array<ContractPage>;
}
/**
 * Serializer for overrides used in certificate pages.
 * @export
 * @interface Override
 */
export interface Override {
    /**
     * 
     * @type {string}
     * @memberof Override
     */
    'type': string;
    /**
     * 
     * @type {OverrideValue}
     * @memberof Override
     */
    'value': OverrideValue;
    /**
     * 
     * @type {string}
     * @memberof Override
     */
    'id': string;
}
/**
 * Serializer for override values used in certificate pages.
 * @export
 * @interface OverrideValue
 */
export interface OverrideValue {
    /**
     * 
     * @type {string}
     * @memberof OverrideValue
     */
    'readable_id': string;
    /**
     * 
     * @type {string}
     * @memberof OverrideValue
     */
    'CEUs': string;
}
/**
 * Serializer for individual Wagtail pages.
 * @export
 * @interface Page
 */
export interface Page {
    /**
     * 
     * @type {number}
     * @memberof Page
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Page
     */
    'title': string;
    /**
     * 
     * @type {PageMeta}
     * @memberof Page
     */
    'meta': PageMeta;
}
/**
 * Serializer for a list of Wagtail pages.
 * @export
 * @interface PageList
 */
export interface PageList {
    /**
     * 
     * @type {PageListMeta}
     * @memberof PageList
     */
    'meta': PageListMeta;
    /**
     * 
     * @type {Array<Page>}
     * @memberof PageList
     */
    'items': Array<Page>;
}
/**
 * Serializer for metadata of a list of Wagtail pages.
 * @export
 * @interface PageListMeta
 */
export interface PageListMeta {
    /**
     * 
     * @type {number}
     * @memberof PageListMeta
     */
    'total_count': number;
}
/**
 * Serializer for page metadata used in various Wagtail pages.
 * @export
 * @interface PageMeta
 */
export interface PageMeta {
    /**
     * 
     * @type {string}
     * @memberof PageMeta
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof PageMeta
     */
    'detail_url': string;
    /**
     * 
     * @type {string}
     * @memberof PageMeta
     */
    'html_url': string;
    /**
     * 
     * @type {string}
     * @memberof PageMeta
     */
    'slug': string;
    /**
     * 
     * @type {boolean}
     * @memberof PageMeta
     */
    'show_in_menus': boolean;
    /**
     * 
     * @type {string}
     * @memberof PageMeta
     */
    'seo_title': string;
    /**
     * 
     * @type {string}
     * @memberof PageMeta
     */
    'search_description': string;
    /**
     * 
     * @type {string}
     * @memberof PageMeta
     */
    'first_published_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof PageMeta
     */
    'alias_of': string | null;
    /**
     * 
     * @type {string}
     * @memberof PageMeta
     */
    'locale': string;
    /**
     * 
     * @type {boolean}
     * @memberof PageMeta
     */
    'live': boolean;
    /**
     * 
     * @type {string}
     * @memberof PageMeta
     */
    'last_published_at': string | null;
}
/**
 * Extends the PageMetaSerializer to work with a Page object
 * @export
 * @interface PageMetaModel
 */
export interface PageMetaModel {
    /**
     * Get the page type, in a more simple manner than Wagtail.  The Wagtail version of this is PageTypeField, and it tries to modify the context, which we neither need nor is in the correct format for it.
     * @type {string}
     * @memberof PageMetaModel
     */
    'type': string;
    /**
     * Get the detail URL, which should be the API call for this page.  The Wagtail version of this is DetailUrlField and it also tries to make changes to the context that we don\'t need.
     * @type {string}
     * @memberof PageMetaModel
     */
    'detail_url': string;
    /**
     * Return PageHtmlUrlField. This is wrapped for OpenAPI schema generation.
     * @type {string}
     * @memberof PageMetaModel
     */
    'html_url': string;
    /**
     * 
     * @type {string}
     * @memberof PageMetaModel
     */
    'slug': string;
    /**
     * 
     * @type {boolean}
     * @memberof PageMetaModel
     */
    'show_in_menus': boolean;
    /**
     * 
     * @type {string}
     * @memberof PageMetaModel
     */
    'seo_title': string;
    /**
     * 
     * @type {string}
     * @memberof PageMetaModel
     */
    'search_description': string;
    /**
     * 
     * @type {string}
     * @memberof PageMetaModel
     */
    'first_published_at': string | null;
    /**
     * 
     * @type {string}
     * @memberof PageMetaModel
     */
    'alias_of': string | null;
    /**
     * Return PageLocaleField. This is wrapped for OpenAPI schema generation.
     * @type {string}
     * @memberof PageMetaModel
     */
    'locale': string;
    /**
     * 
     * @type {boolean}
     * @memberof PageMetaModel
     */
    'live': boolean;
    /**
     * 
     * @type {string}
     * @memberof PageMetaModel
     */
    'last_published_at': string | null;
}
/**
 * @type PagesRetrieve200Response
 * @export
 */
export type PagesRetrieve200Response = CertificatePage | CoursePageItem | Page | ProgramPageItem;

/**
 * 
 * @export
 * @interface PaginatedCourseWithCourseRunsSerializerV2List
 */
export interface PaginatedCourseWithCourseRunsSerializerV2List {
    /**
     * 
     * @type {number}
     * @memberof PaginatedCourseWithCourseRunsSerializerV2List
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedCourseWithCourseRunsSerializerV2List
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedCourseWithCourseRunsSerializerV2List
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<CourseWithCourseRunsSerializerV2>}
     * @memberof PaginatedCourseWithCourseRunsSerializerV2List
     */
    'results': Array<CourseWithCourseRunsSerializerV2>;
}
/**
 * 
 * @export
 * @interface PaginatedStaffDashboardUserList
 */
export interface PaginatedStaffDashboardUserList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedStaffDashboardUserList
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedStaffDashboardUserList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedStaffDashboardUserList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<StaffDashboardUser>}
     * @memberof PaginatedStaffDashboardUserList
     */
    'results': Array<StaffDashboardUser>;
}
/**
 * 
 * @export
 * @interface PaginatedV1CourseWithCourseRunsList
 */
export interface PaginatedV1CourseWithCourseRunsList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedV1CourseWithCourseRunsList
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedV1CourseWithCourseRunsList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedV1CourseWithCourseRunsList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<V1CourseWithCourseRuns>}
     * @memberof PaginatedV1CourseWithCourseRunsList
     */
    'results': Array<V1CourseWithCourseRuns>;
}
/**
 * 
 * @export
 * @interface PaginatedV1ProgramList
 */
export interface PaginatedV1ProgramList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedV1ProgramList
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedV1ProgramList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedV1ProgramList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<V1Program>}
     * @memberof PaginatedV1ProgramList
     */
    'results': Array<V1Program>;
}
/**
 * 
 * @export
 * @interface PaginatedV2ProgramCollectionList
 */
export interface PaginatedV2ProgramCollectionList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedV2ProgramCollectionList
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedV2ProgramCollectionList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedV2ProgramCollectionList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<V2ProgramCollection>}
     * @memberof PaginatedV2ProgramCollectionList
     */
    'results': Array<V2ProgramCollection>;
}
/**
 * 
 * @export
 * @interface PaginatedV2ProgramList
 */
export interface PaginatedV2ProgramList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedV2ProgramList
     */
    'count': number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedV2ProgramList
     */
    'next'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedV2ProgramList
     */
    'previous'?: string | null;
    /**
     * 
     * @type {Array<V2Program>}
     * @memberof PaginatedV2ProgramList
     */
    'results': Array<V2Program>;
}
/**
 * 
 * @export
 * @interface PartnerSchool
 */
export interface PartnerSchool {
    /**
     * 
     * @type {number}
     * @memberof PartnerSchool
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PartnerSchool
     */
    'created_on': string;
    /**
     * 
     * @type {string}
     * @memberof PartnerSchool
     */
    'updated_on': string;
    /**
     * 
     * @type {string}
     * @memberof PartnerSchool
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PartnerSchool
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface PartnerSchoolRequest
 */
export interface PartnerSchoolRequest {
    /**
     * 
     * @type {string}
     * @memberof PartnerSchoolRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PartnerSchoolRequest
     */
    'email': string;
}
/**
 * Serializer for confirming a user email change
 * @export
 * @interface PatchedChangeEmailRequestUpdateRequest
 */
export interface PatchedChangeEmailRequestUpdateRequest {
    /**
     * 
     * @type {boolean}
     * @memberof PatchedChangeEmailRequestUpdateRequest
     */
    'confirmed'?: boolean;
}
/**
 * 
 * @export
 * @interface PatchedUpdateCourseRunEnrollmentRequest
 */
export interface PatchedUpdateCourseRunEnrollmentRequest {
    /**
     * Whether to receive course emails
     * @type {boolean}
     * @memberof PatchedUpdateCourseRunEnrollmentRequest
     */
    'receive_emails'?: boolean;
}
/**
 * Serializer for users
 * @export
 * @interface PatchedUserRequest
 */
export interface PatchedUserRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedUserRequest
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedUserRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedUserRequest
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedUserRequest
     */
    'password'?: string;
    /**
     * 
     * @type {LegalAddressRequest}
     * @memberof PatchedUserRequest
     */
    'legal_address'?: LegalAddressRequest | null;
    /**
     * 
     * @type {UserProfileRequest}
     * @memberof PatchedUserRequest
     */
    'user_profile'?: UserProfileRequest | null;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedUserRequest
     */
    'is_active'?: boolean;
}
/**
 * * `marketing` - marketing * `sales` - sales * `financial-assistance` - financial-assistance * `customer-support` - customer-support * `staff` - staff * `legacy` - legacy
 * @export
 * @enum {string}
 */

export const PaymentTypeEnum = {
    /**
    * marketing
    */
    Marketing: 'marketing',
    /**
    * sales
    */
    Sales: 'sales',
    /**
    * financial-assistance
    */
    FinancialAssistance: 'financial-assistance',
    /**
    * customer-support
    */
    CustomerSupport: 'customer-support',
    /**
    * staff
    */
    Staff: 'staff',
    /**
    * legacy
    */
    Legacy: 'legacy'
} as const;

export type PaymentTypeEnum = typeof PaymentTypeEnum[keyof typeof PaymentTypeEnum];


/**
 * Serializer for price items used in course pages.
 * @export
 * @interface PriceItem
 */
export interface PriceItem {
    /**
     * 
     * @type {string}
     * @memberof PriceItem
     */
    'type': string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof PriceItem
     */
    'value': { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof PriceItem
     */
    'id': string;
}
/**
 * Simple serializer for Product without related purchasable objects
 * @export
 * @interface ProductFlexibilePrice
 */
export interface ProductFlexibilePrice {
    /**
     * 
     * @type {number}
     * @memberof ProductFlexibilePrice
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof ProductFlexibilePrice
     */
    'price': string;
    /**
     * 
     * @type {string}
     * @memberof ProductFlexibilePrice
     */
    'description': string;
    /**
     * Controls visibility of the product in the app.
     * @type {boolean}
     * @memberof ProductFlexibilePrice
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {Discount}
     * @memberof ProductFlexibilePrice
     */
    'product_flexible_price': Discount | null;
}
/**
 * Simple serializer for Product without related purchasable objects
 * @export
 * @interface ProductFlexibilePriceRequest
 */
export interface ProductFlexibilePriceRequest {
    /**
     * 
     * @type {string}
     * @memberof ProductFlexibilePriceRequest
     */
    'price': string;
    /**
     * 
     * @type {string}
     * @memberof ProductFlexibilePriceRequest
     */
    'description': string;
    /**
     * Controls visibility of the product in the app.
     * @type {boolean}
     * @memberof ProductFlexibilePriceRequest
     */
    'is_active'?: boolean;
}
/**
 * 
 * @export
 * @interface Program
 */
export interface Program {
    /**
     * 
     * @type {number}
     * @memberof Program
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Program
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Program
     */
    'readable_id': string;
}
/**
 * ProgramCertificate model serializer
 * @export
 * @interface ProgramCertificate
 */
export interface ProgramCertificate {
    /**
     * 
     * @type {string}
     * @memberof ProgramCertificate
     */
    'uuid': string;
    /**
     * Get the link at which this certificate will be served Format: /certificate/program/<uuid>/ Example: /certificate/program/93ebd74e-5f88-4b47-bb09-30a6d575328f/
     * @type {string}
     * @memberof ProgramCertificate
     */
    'link': string;
}
/**
 * Program page model serializer
 * @export
 * @interface ProgramPage
 */
export interface ProgramPage {
    /**
     * Serializes the source of the feature_image
     * @type {string}
     * @memberof ProgramPage
     */
    'feature_image_src': string;
    /**
     * 
     * @type {string}
     * @memberof ProgramPage
     */
    'page_url': string;
    /**
     * 
     * @type {string}
     * @memberof ProgramPage
     */
    'financial_assistance_form_url': string;
    /**
     * The description shown on the home page and product page.
     * @type {string}
     * @memberof ProgramPage
     */
    'description': string;
    /**
     * 
     * @type {boolean}
     * @memberof ProgramPage
     */
    'live': boolean;
    /**
     * A short description indicating how long it takes to complete (e.g. \'4 weeks\').
     * @type {string}
     * @memberof ProgramPage
     */
    'length'?: string;
    /**
     * A short description indicating how much effort is required (e.g. 1-3 hours per week).
     * @type {string}
     * @memberof ProgramPage
     */
    'effort'?: string | null;
    /**
     * Get the price text from the program page.
     * @type {string}
     * @memberof ProgramPage
     */
    'price': string;
}
/**
 * Serializer for individual program page items, including all relevant fields.
 * @export
 * @interface ProgramPageItem
 */
export interface ProgramPageItem {
    /**
     * 
     * @type {number}
     * @memberof ProgramPageItem
     */
    'id': number;
    /**
     * 
     * @type {PageMeta}
     * @memberof ProgramPageItem
     */
    'meta': PageMeta;
    /**
     * The page title as you\'d like it to be seen by the public
     * @type {string}
     * @memberof ProgramPageItem
     */
    'title': string;
    /**
     * The description shown on the home page and product page.
     * @type {string}
     * @memberof ProgramPageItem
     */
    'description': string;
    /**
     * A short description indicating how long it takes to complete (e.g. \'4 weeks\').
     * @type {string}
     * @memberof ProgramPageItem
     */
    'length': string;
    /**
     * A short description indicating how much effort is required (e.g. 1-3 hours per week).
     * @type {string}
     * @memberof ProgramPageItem
     */
    'effort': string | null;
    /**
     * The minimum number of hours per week required to complete the course.
     * @type {string}
     * @memberof ProgramPageItem
     */
    'min_weekly_hours': string;
    /**
     * The maximum number of hours per week required to complete the course.
     * @type {string}
     * @memberof ProgramPageItem
     */
    'max_weekly_hours': string;
    /**
     * The minimum number of weeks required to complete the course/program.
     * @type {number}
     * @memberof ProgramPageItem
     */
    'min_weeks': number | null;
    /**
     * The maximum number of weeks required to complete the course/program.
     * @type {number}
     * @memberof ProgramPageItem
     */
    'max_weeks': number | null;
    /**
     * 
     * @type {Array<PriceItem>}
     * @memberof ProgramPageItem
     */
    'price': Array<PriceItem>;
    /**
     * Specify the minimum product price. This is used by MIT Learn.
     * @type {number}
     * @memberof ProgramPageItem
     */
    'min_price': number | null;
    /**
     * Specify the maximum product price. This is used by MIT Learn.
     * @type {number}
     * @memberof ProgramPageItem
     */
    'max_price': number | null;
    /**
     * A short description indicating prerequisites of this course/program.
     * @type {string}
     * @memberof ProgramPageItem
     */
    'prerequisites': string | null;
    /**
     * URL a relevant FAQ page or entry for the course/program.
     * @type {string}
     * @memberof ProgramPageItem
     */
    'faq_url': string | null;
    /**
     * Details about this course/program.
     * @type {string}
     * @memberof ProgramPageItem
     */
    'about': string | null;
    /**
     * What you will learn from this course.
     * @type {string}
     * @memberof ProgramPageItem
     */
    'what_you_learn': string | null;
    /**
     * 
     * @type {FeatureImage}
     * @memberof ProgramPageItem
     */
    'feature_image': FeatureImage;
    /**
     * URL to the video to be displayed for this course/program. It can be an HLS or Youtube video URL.
     * @type {string}
     * @memberof ProgramPageItem
     */
    'video_url': string | null;
    /**
     * The title text to display in the faculty cards section of the product page.
     * @type {string}
     * @memberof ProgramPageItem
     */
    'faculty_section_title': string | null;
    /**
     * 
     * @type {Array<Faculty>}
     * @memberof ProgramPageItem
     */
    'faculty': Array<Faculty>;
    /**
     * 
     * @type {CertificatePage}
     * @memberof ProgramPageItem
     */
    'certificate_page': CertificatePage;
    /**
     * 
     * @type {V2Program}
     * @memberof ProgramPageItem
     */
    'program_details': V2Program;
}
/**
 * Serializer for a list of program pages, including metadata and items.
 * @export
 * @interface ProgramPageList
 */
export interface ProgramPageList {
    /**
     * 
     * @type {PageListMeta}
     * @memberof ProgramPageList
     */
    'meta': PageListMeta;
    /**
     * 
     * @type {Array<ProgramPageItem>}
     * @memberof ProgramPageList
     */
    'items': Array<ProgramPageItem>;
}
/**
 * Serializer for public user data
 * @export
 * @interface PublicUser
 */
export interface PublicUser {
    /**
     * 
     * @type {number}
     * @memberof PublicUser
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PublicUser
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PublicUser
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublicUser
     */
    'created_on': string;
    /**
     * 
     * @type {string}
     * @memberof PublicUser
     */
    'updated_on': string;
}
/**
 * * `one-time` - one-time * `one-time-per-user` - one-time-per-user * `unlimited` - unlimited
 * @export
 * @enum {string}
 */

export const RedemptionTypeEnum = {
    /**
    * one-time
    */
    OneTime: 'one-time',
    /**
    * one-time-per-user
    */
    OneTimePerUser: 'one-time-per-user',
    /**
    * unlimited
    */
    Unlimited: 'unlimited'
} as const;

export type RedemptionTypeEnum = typeof RedemptionTypeEnum[keyof typeof RedemptionTypeEnum];


/**
 * * `b2b-disallowed` - b2b-disallowed * `b2b-error-no-contract` - b2b-error-no-contract * `b2b-error-no-product` - b2b-error-no-product * `b2b-error-missing-enrollment-code` - b2b-error-missing-enrollment-code * `b2b-error-invalid-enrollment-code` - b2b-error-invalid-enrollment-code * `b2b-error-requires-checkout` - b2b-error-requires-checkout * `b2b-enroll-success` - b2b-enroll-success
 * @export
 * @enum {string}
 */

export const ResultEnum = {
    /**
    * b2b-disallowed
    */
    Disallowed: 'b2b-disallowed',
    /**
    * b2b-error-no-contract
    */
    ErrorNoContract: 'b2b-error-no-contract',
    /**
    * b2b-error-no-product
    */
    ErrorNoProduct: 'b2b-error-no-product',
    /**
    * b2b-error-missing-enrollment-code
    */
    ErrorMissingEnrollmentCode: 'b2b-error-missing-enrollment-code',
    /**
    * b2b-error-invalid-enrollment-code
    */
    ErrorInvalidEnrollmentCode: 'b2b-error-invalid-enrollment-code',
    /**
    * b2b-error-requires-checkout
    */
    ErrorRequiresCheckout: 'b2b-error-requires-checkout',
    /**
    * b2b-enroll-success
    */
    EnrollSuccess: 'b2b-enroll-success'
} as const;

export type ResultEnum = typeof ResultEnum[keyof typeof ResultEnum];


/**
 * Serializer for signatory items used in certificate pages.
 * @export
 * @interface SignatoryItem
 */
export interface SignatoryItem {
    /**
     * 
     * @type {string}
     * @memberof SignatoryItem
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SignatoryItem
     */
    'title_1': string;
    /**
     * 
     * @type {string}
     * @memberof SignatoryItem
     */
    'title_2': string;
    /**
     * 
     * @type {string}
     * @memberof SignatoryItem
     */
    'organization': string;
    /**
     * 
     * @type {string}
     * @memberof SignatoryItem
     */
    'signature_image': string;
}
/**
 * Serializer for data we care about in the staff dashboard
 * @export
 * @interface StaffDashboardUser
 */
export interface StaffDashboardUser {
    /**
     * 
     * @type {number}
     * @memberof StaffDashboardUser
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof StaffDashboardUser
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof StaffDashboardUser
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof StaffDashboardUser
     */
    'email': string;
    /**
     * 
     * @type {LegalAddress}
     * @memberof StaffDashboardUser
     */
    'legal_address': LegalAddress | null;
    /**
     * The user can access the admin site
     * @type {boolean}
     * @memberof StaffDashboardUser
     */
    'is_staff'?: boolean;
    /**
     * Designates that this user has all permissions without explicitly assigning them.
     * @type {boolean}
     * @memberof StaffDashboardUser
     */
    'is_superuser'?: boolean;
}
/**
 * Serializer for topics used in course pages.
 * @export
 * @interface Topic
 */
export interface Topic {
    /**
     * 
     * @type {string}
     * @memberof Topic
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Topic
     */
    'parent'?: string;
}
/**
 * Serializer for users
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string | null;
    /**
     * 
     * @type {LegalAddress}
     * @memberof User
     */
    'legal_address': LegalAddress | null;
    /**
     * 
     * @type {UserProfile}
     * @memberof User
     */
    'user_profile'?: UserProfile | null;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'is_anonymous': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'is_authenticated': boolean;
    /**
     * Returns True if the user has editor permissions for the CMS
     * @type {boolean}
     * @memberof User
     */
    'is_editor': boolean;
    /**
     * The user can access the admin site
     * @type {boolean}
     * @memberof User
     */
    'is_staff': boolean;
    /**
     * Designates that this user has all permissions without explicitly assigning them.
     * @type {boolean}
     * @memberof User
     */
    'is_superuser': boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'created_on': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updated_on': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof User
     */
    'grants': Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'is_active'?: boolean;
    /**
     * 
     * @type {Array<UserOrganization>}
     * @memberof User
     */
    'b2b_organizations': Array<UserOrganization>;
}
/**
 * Serializer for user organization data.  Slightly different from the OrganizationPageSerializer; we only need the user\'s orgs and contracts.
 * @export
 * @interface UserOrganization
 */
export interface UserOrganization {
    /**
     * 
     * @type {number}
     * @memberof UserOrganization
     */
    'id': number;
    /**
     * The name of the organization
     * @type {string}
     * @memberof UserOrganization
     */
    'name': string;
    /**
     * Any useful extra information about the organization
     * @type {string}
     * @memberof UserOrganization
     */
    'description': string;
    /**
     * The organization\'s logo. Will be displayed in the app in various places.
     * @type {string}
     * @memberof UserOrganization
     */
    'logo': string;
    /**
     * The name of the page as it will appear in URLs e.g http://domain.com/blog/[my-slug]/
     * @type {string}
     * @memberof UserOrganization
     */
    'slug': string;
    /**
     * 
     * @type {Array<ContractPage>}
     * @memberof UserOrganization
     */
    'contracts': Array<ContractPage>;
}
/**
 * Serializer for profile
 * @export
 * @interface UserProfile
 */
export interface UserProfile {
    /**
     * 
     * @type {UserProfileGender}
     * @memberof UserProfile
     */
    'gender'?: UserProfileGender | null;
    /**
     * 
     * @type {number}
     * @memberof UserProfile
     */
    'year_of_birth'?: number | null;
    /**
     * Flags if we\'ve asked the user for additional information
     * @type {boolean}
     * @memberof UserProfile
     */
    'addl_field_flag'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    'job_title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    'industry'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    'job_function'?: string | null;
    /**
     * 
     * @type {CompanySizeEnum}
     * @memberof UserProfile
     */
    'company_size'?: CompanySizeEnum | null;
    /**
     * 
     * @type {YearsExperienceEnum}
     * @memberof UserProfile
     */
    'years_experience'?: YearsExperienceEnum | null;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    'leadership_level'?: string | null;
    /**
     * 
     * @type {UserProfileHighestEducation}
     * @memberof UserProfile
     */
    'highest_education'?: UserProfileHighestEducation | null;
    /**
     * The learner identifies as type Student
     * @type {boolean}
     * @memberof UserProfile
     */
    'type_is_student'?: boolean | null;
    /**
     * The learner identifies as type Professional
     * @type {boolean}
     * @memberof UserProfile
     */
    'type_is_professional'?: boolean | null;
    /**
     * The learner identifies as type Educator
     * @type {boolean}
     * @memberof UserProfile
     */
    'type_is_educator'?: boolean | null;
    /**
     * The learner identifies as type Other (not professional, student, or educator)
     * @type {boolean}
     * @memberof UserProfile
     */
    'type_is_other'?: boolean | null;
}


/**
 * @type UserProfileGender
 * @export
 */
export type UserProfileGender = BlankEnum | GenderEnum;

/**
 * @type UserProfileHighestEducation
 * @export
 */
export type UserProfileHighestEducation = BlankEnum | HighestEducationEnum;

/**
 * Serializer for profile
 * @export
 * @interface UserProfileRequest
 */
export interface UserProfileRequest {
    /**
     * 
     * @type {UserProfileGender}
     * @memberof UserProfileRequest
     */
    'gender'?: UserProfileGender | null;
    /**
     * 
     * @type {number}
     * @memberof UserProfileRequest
     */
    'year_of_birth'?: number | null;
    /**
     * Flags if we\'ve asked the user for additional information
     * @type {boolean}
     * @memberof UserProfileRequest
     */
    'addl_field_flag'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserProfileRequest
     */
    'company'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserProfileRequest
     */
    'job_title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserProfileRequest
     */
    'industry'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserProfileRequest
     */
    'job_function'?: string | null;
    /**
     * 
     * @type {CompanySizeEnum}
     * @memberof UserProfileRequest
     */
    'company_size'?: CompanySizeEnum | null;
    /**
     * 
     * @type {YearsExperienceEnum}
     * @memberof UserProfileRequest
     */
    'years_experience'?: YearsExperienceEnum | null;
    /**
     * 
     * @type {string}
     * @memberof UserProfileRequest
     */
    'leadership_level'?: string | null;
    /**
     * 
     * @type {UserProfileHighestEducation}
     * @memberof UserProfileRequest
     */
    'highest_education'?: UserProfileHighestEducation | null;
    /**
     * The learner identifies as type Student
     * @type {boolean}
     * @memberof UserProfileRequest
     */
    'type_is_student'?: boolean | null;
    /**
     * The learner identifies as type Professional
     * @type {boolean}
     * @memberof UserProfileRequest
     */
    'type_is_professional'?: boolean | null;
    /**
     * The learner identifies as type Educator
     * @type {boolean}
     * @memberof UserProfileRequest
     */
    'type_is_educator'?: boolean | null;
    /**
     * The learner identifies as type Other (not professional, student, or educator)
     * @type {boolean}
     * @memberof UserProfileRequest
     */
    'type_is_other'?: boolean | null;
}


/**
 * 
 * @export
 * @interface UserProgramEnrollmentDetail
 */
export interface UserProgramEnrollmentDetail {
    /**
     * 
     * @type {V1Program}
     * @memberof UserProgramEnrollmentDetail
     */
    'program': V1Program;
    /**
     * 
     * @type {Array<CourseRunEnrollment>}
     * @memberof UserProgramEnrollmentDetail
     */
    'enrollments': Array<CourseRunEnrollment>;
    /**
     * 
     * @type {ProgramCertificate}
     * @memberof UserProgramEnrollmentDetail
     */
    'certificate': ProgramCertificate | null;
}
/**
 * CourseRun model serializer
 * @export
 * @interface V1BaseCourseRun
 */
export interface V1BaseCourseRun {
    /**
     * The title of the course. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1BaseCourseRun
     */
    'title': string;
    /**
     * The day the course begins. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1BaseCourseRun
     */
    'start_date'?: string | null;
    /**
     * The last day the course is active. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1BaseCourseRun
     */
    'end_date'?: string | null;
    /**
     * The first day students can enroll. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1BaseCourseRun
     */
    'enrollment_start'?: string | null;
    /**
     * The last day students can enroll. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1BaseCourseRun
     */
    'enrollment_end'?: string | null;
    /**
     * The date beyond which the learner should not see link to this course run on their dashboard.
     * @type {string}
     * @memberof V1BaseCourseRun
     */
    'expiration_date'?: string | null;
    /**
     * Get the courseware URL
     * @type {string}
     * @memberof V1BaseCourseRun
     */
    'courseware_url': string | null;
    /**
     * 
     * @type {string}
     * @memberof V1BaseCourseRun
     */
    'courseware_id': string;
    /**
     * The day certificates should be available to users. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1BaseCourseRun
     */
    'certificate_available_date'?: string | null;
    /**
     * The date beyond which the learner can not enroll in paid course mode.
     * @type {string}
     * @memberof V1BaseCourseRun
     */
    'upgrade_deadline'?: string | null;
    /**
     * Check if the course run is upgradable
     * @type {boolean}
     * @memberof V1BaseCourseRun
     */
    'is_upgradable': boolean;
    /**
     * Check if the course run is enrollable
     * @type {boolean}
     * @memberof V1BaseCourseRun
     */
    'is_enrollable': boolean;
    /**
     * Check if the course run is archived
     * @type {boolean}
     * @memberof V1BaseCourseRun
     */
    'is_archived': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof V1BaseCourseRun
     */
    'is_self_paced'?: boolean;
    /**
     * A string that identifies the set of runs that this run belongs to (example: \'R2\')
     * @type {string}
     * @memberof V1BaseCourseRun
     */
    'run_tag': string;
    /**
     * 
     * @type {number}
     * @memberof V1BaseCourseRun
     */
    'id': number;
    /**
     * 
     * @type {boolean}
     * @memberof V1BaseCourseRun
     */
    'live'?: boolean;
    /**
     * Get the course number
     * @type {string}
     * @memberof V1BaseCourseRun
     */
    'course_number': string;
    /**
     * 
     * @type {Array<ProductFlexibilePrice>}
     * @memberof V1BaseCourseRun
     */
    'products': Array<ProductFlexibilePrice>;
    /**
     * 
     * @type {boolean}
     * @memberof V1BaseCourseRun
     */
    'approved_flexible_price_exists': boolean;
}
/**
 * CourseRun model serializer - also serializes the parent Course.
 * @export
 * @interface V1CourseRunWithCourse
 */
export interface V1CourseRunWithCourse {
    /**
     * The title of the course. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1CourseRunWithCourse
     */
    'title': string;
    /**
     * The day the course begins. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1CourseRunWithCourse
     */
    'start_date'?: string | null;
    /**
     * The last day the course is active. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1CourseRunWithCourse
     */
    'end_date'?: string | null;
    /**
     * The first day students can enroll. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1CourseRunWithCourse
     */
    'enrollment_start'?: string | null;
    /**
     * The last day students can enroll. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1CourseRunWithCourse
     */
    'enrollment_end'?: string | null;
    /**
     * The date beyond which the learner should not see link to this course run on their dashboard.
     * @type {string}
     * @memberof V1CourseRunWithCourse
     */
    'expiration_date'?: string | null;
    /**
     * Get the courseware URL
     * @type {string}
     * @memberof V1CourseRunWithCourse
     */
    'courseware_url': string | null;
    /**
     * 
     * @type {string}
     * @memberof V1CourseRunWithCourse
     */
    'courseware_id': string;
    /**
     * The day certificates should be available to users. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1CourseRunWithCourse
     */
    'certificate_available_date'?: string | null;
    /**
     * The date beyond which the learner can not enroll in paid course mode.
     * @type {string}
     * @memberof V1CourseRunWithCourse
     */
    'upgrade_deadline'?: string | null;
    /**
     * Check if the course run is upgradable
     * @type {boolean}
     * @memberof V1CourseRunWithCourse
     */
    'is_upgradable': boolean;
    /**
     * Check if the course run is enrollable
     * @type {boolean}
     * @memberof V1CourseRunWithCourse
     */
    'is_enrollable': boolean;
    /**
     * Check if the course run is archived
     * @type {boolean}
     * @memberof V1CourseRunWithCourse
     */
    'is_archived': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof V1CourseRunWithCourse
     */
    'is_self_paced'?: boolean;
    /**
     * A string that identifies the set of runs that this run belongs to (example: \'R2\')
     * @type {string}
     * @memberof V1CourseRunWithCourse
     */
    'run_tag': string;
    /**
     * 
     * @type {number}
     * @memberof V1CourseRunWithCourse
     */
    'id': number;
    /**
     * 
     * @type {boolean}
     * @memberof V1CourseRunWithCourse
     */
    'live'?: boolean;
    /**
     * Get the course number
     * @type {string}
     * @memberof V1CourseRunWithCourse
     */
    'course_number': string;
    /**
     * List of products associated with this course run
     * @type {Array<ProductFlexibilePrice>}
     * @memberof V1CourseRunWithCourse
     */
    'products': Array<ProductFlexibilePrice>;
    /**
     * 
     * @type {boolean}
     * @memberof V1CourseRunWithCourse
     */
    'approved_flexible_price_exists': boolean;
    /**
     * 
     * @type {Course}
     * @memberof V1CourseRunWithCourse
     */
    'course': Course;
}
/**
 * CourseRun model serializer - also serializes the parent Course.
 * @export
 * @interface V1CourseRunWithCourseRequest
 */
export interface V1CourseRunWithCourseRequest {
    /**
     * The title of the course. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1CourseRunWithCourseRequest
     */
    'title': string;
    /**
     * The day the course begins. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1CourseRunWithCourseRequest
     */
    'start_date'?: string | null;
    /**
     * The last day the course is active. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1CourseRunWithCourseRequest
     */
    'end_date'?: string | null;
    /**
     * The first day students can enroll. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1CourseRunWithCourseRequest
     */
    'enrollment_start'?: string | null;
    /**
     * The last day students can enroll. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1CourseRunWithCourseRequest
     */
    'enrollment_end'?: string | null;
    /**
     * The date beyond which the learner should not see link to this course run on their dashboard.
     * @type {string}
     * @memberof V1CourseRunWithCourseRequest
     */
    'expiration_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1CourseRunWithCourseRequest
     */
    'courseware_id': string;
    /**
     * The day certificates should be available to users. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V1CourseRunWithCourseRequest
     */
    'certificate_available_date'?: string | null;
    /**
     * The date beyond which the learner can not enroll in paid course mode.
     * @type {string}
     * @memberof V1CourseRunWithCourseRequest
     */
    'upgrade_deadline'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof V1CourseRunWithCourseRequest
     */
    'is_self_paced'?: boolean;
    /**
     * A string that identifies the set of runs that this run belongs to (example: \'R2\')
     * @type {string}
     * @memberof V1CourseRunWithCourseRequest
     */
    'run_tag': string;
    /**
     * 
     * @type {boolean}
     * @memberof V1CourseRunWithCourseRequest
     */
    'live'?: boolean;
}
/**
 * Course model serializer - also serializes child course runs
 * @export
 * @interface V1CourseWithCourseRuns
 */
export interface V1CourseWithCourseRuns {
    /**
     * 
     * @type {number}
     * @memberof V1CourseWithCourseRuns
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof V1CourseWithCourseRuns
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof V1CourseWithCourseRuns
     */
    'readable_id': string;
    /**
     * Get next run id
     * @type {number}
     * @memberof V1CourseWithCourseRuns
     */
    'next_run_id': number | null;
    /**
     * 
     * @type {Array<Department>}
     * @memberof V1CourseWithCourseRuns
     */
    'departments': Array<Department>;
    /**
     * 
     * @type {CoursePage}
     * @memberof V1CourseWithCourseRuns
     */
    'page': CoursePage;
    /**
     * 
     * @type {Program}
     * @memberof V1CourseWithCourseRuns
     */
    'programs': Program | null;
    /**
     * 
     * @type {Array<V1BaseCourseRun>}
     * @memberof V1CourseWithCourseRuns
     */
    'courseruns': Array<V1BaseCourseRun>;
}
/**
 * Program model serializer
 * @export
 * @interface V1Program
 */
export interface V1Program {
    /**
     * 
     * @type {string}
     * @memberof V1Program
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof V1Program
     */
    'readable_id': string;
    /**
     * 
     * @type {number}
     * @memberof V1Program
     */
    'id': number;
    /**
     * 
     * @type {V1CourseWithCourseRuns}
     * @memberof V1Program
     */
    'courses': V1CourseWithCourseRuns;
    /**
     * 
     * @type {V1ProgramRequirements}
     * @memberof V1Program
     */
    'requirements': V1ProgramRequirements;
    /**
     * 
     * @type {Array<V1ProgramRequirement>}
     * @memberof V1Program
     */
    'req_tree': Array<V1ProgramRequirement>;
    /**
     * 
     * @type {ProgramPage}
     * @memberof V1Program
     */
    'page': ProgramPage;
    /**
     * 
     * @type {string}
     * @memberof V1Program
     */
    'program_type'?: string | null;
    /**
     * 
     * @type {Array<Department>}
     * @memberof V1Program
     */
    'departments': Array<Department>;
    /**
     * 
     * @type {boolean}
     * @memberof V1Program
     */
    'live'?: boolean;
}
/**
 * Serializer for a ProgramRequirement
 * @export
 * @interface V1ProgramRequirement
 */
export interface V1ProgramRequirement {
    /**
     * 
     * @type {number}
     * @memberof V1ProgramRequirement
     */
    'id'?: number | null;
    /**
     * 
     * @type {V1ProgramRequirementData}
     * @memberof V1ProgramRequirement
     */
    'data': V1ProgramRequirementData;
    /**
     * 
     * @type {Array<V1ProgramRequirement>}
     * @memberof V1ProgramRequirement
     */
    'children'?: Array<V1ProgramRequirement>;
}
/**
 * Serializer for ProgramRequirement data
 * @export
 * @interface V1ProgramRequirementData
 */
export interface V1ProgramRequirementData {
    /**
     * 
     * @type {V1ProgramRequirementDataNodeTypeEnum}
     * @memberof V1ProgramRequirementData
     */
    'node_type': V1ProgramRequirementDataNodeTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof V1ProgramRequirementData
     */
    'course'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1ProgramRequirementData
     */
    'required_program'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1ProgramRequirementData
     */
    'program'?: string;
    /**
     * 
     * @type {string}
     * @memberof V1ProgramRequirementData
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1ProgramRequirementData
     */
    'operator'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V1ProgramRequirementData
     */
    'operator_value'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof V1ProgramRequirementData
     */
    'elective_flag'?: boolean | null;
}


/**
 * * `operator` - operator * `course` - course * `program` - program
 * @export
 * @enum {string}
 */

export const V1ProgramRequirementDataNodeTypeEnum = {
    /**
    * operator
    */
    Operator: 'operator',
    /**
    * course
    */
    Course: 'course',
    /**
    * program
    */
    Program: 'program'
} as const;

export type V1ProgramRequirementDataNodeTypeEnum = typeof V1ProgramRequirementDataNodeTypeEnum[keyof typeof V1ProgramRequirementDataNodeTypeEnum];


/**
 * 
 * @export
 * @interface V1ProgramRequirements
 */
export interface V1ProgramRequirements {
    /**
     * List of required course IDs
     * @type {Array<V1ProgramRequirementsRequiredInner>}
     * @memberof V1ProgramRequirements
     */
    'required'?: Array<V1ProgramRequirementsRequiredInner>;
    /**
     * List of elective course IDs
     * @type {Array<V1ProgramRequirementsRequiredInner>}
     * @memberof V1ProgramRequirements
     */
    'electives'?: Array<V1ProgramRequirementsRequiredInner>;
}
/**
 * @type V1ProgramRequirementsRequiredInner
 * @export
 */
export type V1ProgramRequirementsRequiredInner = number;

/**
 * Course model serializer
 * @export
 * @interface V2Course
 */
export interface V2Course {
    /**
     * 
     * @type {number}
     * @memberof V2Course
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof V2Course
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof V2Course
     */
    'readable_id': string;
    /**
     * Get next run id
     * @type {number}
     * @memberof V2Course
     */
    'next_run_id': number | null;
    /**
     * 
     * @type {Array<Department>}
     * @memberof V2Course
     */
    'departments': Array<Department>;
    /**
     * 
     * @type {CoursePage}
     * @memberof V2Course
     */
    'page': CoursePage;
    /**
     * 
     * @type {Array<{ [key: string]: any; }>}
     * @memberof V2Course
     */
    'programs': Array<{ [key: string]: any; }> | null;
    /**
     * List topics of a course
     * @type {Array<{ [key: string]: any; }>}
     * @memberof V2Course
     */
    'topics': Array<{ [key: string]: any; }>;
    /**
     * 
     * @type {string}
     * @memberof V2Course
     */
    'certificate_type': string;
    /**
     * Check if the prerequisites field is populated in the course page CMS. Returns:     bool: True when the prerequisites field is populated in the course page CMS.  False otherwise.
     * @type {boolean}
     * @memberof V2Course
     */
    'required_prerequisites': boolean;
    /**
     * Get the duration of the course from the course page CMS.
     * @type {string}
     * @memberof V2Course
     */
    'duration': string;
    /**
     * Get the min weeks of the course from the CMS page.
     * @type {number}
     * @memberof V2Course
     */
    'min_weeks': number | null;
    /**
     * Get the max weeks of the course from the CMS page.
     * @type {number}
     * @memberof V2Course
     */
    'max_weeks': number | null;
    /**
     * Get the min price of the product from the CMS page.
     * @type {number}
     * @memberof V2Course
     */
    'min_price': number | null;
    /**
     * Get the max price of the product from the CMS page.
     * @type {number}
     * @memberof V2Course
     */
    'max_price': number | null;
    /**
     * Get the time commitment of the course from the course page CMS.
     * @type {string}
     * @memberof V2Course
     */
    'time_commitment': string | null;
    /**
     * Get course availability
     * @type {string}
     * @memberof V2Course
     */
    'availability': string;
    /**
     * Get the min weekly hours of the course from the course page CMS.
     * @type {string}
     * @memberof V2Course
     */
    'min_weekly_hours': string | null;
    /**
     * Get the max weekly hours of the course from the course page CMS.
     * @type {string}
     * @memberof V2Course
     */
    'max_weekly_hours': string | null;
    /**
     * 
     * @type {boolean}
     * @memberof V2Course
     */
    'include_in_learn_catalog': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof V2Course
     */
    'ingest_content_files_for_ai': boolean;
}
/**
 * Course model serializer
 * @export
 * @interface V2CourseRequest
 */
export interface V2CourseRequest {
    /**
     * 
     * @type {string}
     * @memberof V2CourseRequest
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof V2CourseRequest
     */
    'readable_id': string;
}
/**
 * Serializer for course certificates.
 * @export
 * @interface V2CourseRunCertificate
 */
export interface V2CourseRunCertificate {
    /**
     * 
     * @type {PublicUser}
     * @memberof V2CourseRunCertificate
     */
    'user': PublicUser;
    /**
     * 
     * @type {string}
     * @memberof V2CourseRunCertificate
     */
    'uuid': string;
    /**
     * Indicates whether or not the certificate is revoked
     * @type {boolean}
     * @memberof V2CourseRunCertificate
     */
    'is_revoked': boolean;
    /**
     * 
     * @type {CertificatePageModel}
     * @memberof V2CourseRunCertificate
     */
    'certificate_page': CertificatePageModel;
    /**
     * 
     * @type {V2CourseRunWithCourse}
     * @memberof V2CourseRunCertificate
     */
    'course_run': V2CourseRunWithCourse;
    /**
     * 
     * @type {number}
     * @memberof V2CourseRunCertificate
     */
    'certificate_page_revision': number | null;
}
/**
 * CourseRun model serializer - also serializes the parent Course.
 * @export
 * @interface V2CourseRunWithCourse
 */
export interface V2CourseRunWithCourse {
    /**
     * The title of the course. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V2CourseRunWithCourse
     */
    'title': string;
    /**
     * The day the course begins. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V2CourseRunWithCourse
     */
    'start_date'?: string | null;
    /**
     * The last day the course is active. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V2CourseRunWithCourse
     */
    'end_date'?: string | null;
    /**
     * The first day students can enroll. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V2CourseRunWithCourse
     */
    'enrollment_start'?: string | null;
    /**
     * The last day students can enroll. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V2CourseRunWithCourse
     */
    'enrollment_end'?: string | null;
    /**
     * The date beyond which the learner should not see link to this course run on their dashboard.
     * @type {string}
     * @memberof V2CourseRunWithCourse
     */
    'expiration_date'?: string | null;
    /**
     * Get the courseware URL
     * @type {string}
     * @memberof V2CourseRunWithCourse
     */
    'courseware_url': string | null;
    /**
     * 
     * @type {string}
     * @memberof V2CourseRunWithCourse
     */
    'courseware_id': string;
    /**
     * The day certificates should be available to users. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V2CourseRunWithCourse
     */
    'certificate_available_date'?: string | null;
    /**
     * The date beyond which the learner can not enroll in paid course mode.
     * @type {string}
     * @memberof V2CourseRunWithCourse
     */
    'upgrade_deadline'?: string | null;
    /**
     * Check if the course run is upgradable
     * @type {boolean}
     * @memberof V2CourseRunWithCourse
     */
    'is_upgradable': boolean;
    /**
     * Check if the course run is enrollable
     * @type {boolean}
     * @memberof V2CourseRunWithCourse
     */
    'is_enrollable': boolean;
    /**
     * Check if the course run is archived
     * @type {boolean}
     * @memberof V2CourseRunWithCourse
     */
    'is_archived': boolean;
    /**
     * 
     * @type {boolean}
     * @memberof V2CourseRunWithCourse
     */
    'is_self_paced'?: boolean;
    /**
     * A string that identifies the set of runs that this run belongs to (example: \'R2\')
     * @type {string}
     * @memberof V2CourseRunWithCourse
     */
    'run_tag': string;
    /**
     * 
     * @type {number}
     * @memberof V2CourseRunWithCourse
     */
    'id': number;
    /**
     * 
     * @type {boolean}
     * @memberof V2CourseRunWithCourse
     */
    'live'?: boolean;
    /**
     * Get the course number
     * @type {string}
     * @memberof V2CourseRunWithCourse
     */
    'course_number': string;
    /**
     * 
     * @type {Array<ProductFlexibilePrice>}
     * @memberof V2CourseRunWithCourse
     */
    'products': Array<ProductFlexibilePrice>;
    /**
     * 
     * @type {boolean}
     * @memberof V2CourseRunWithCourse
     */
    'approved_flexible_price_exists': boolean;
    /**
     * 
     * @type {number}
     * @memberof V2CourseRunWithCourse
     */
    'b2b_contract'?: number | null;
    /**
     * 
     * @type {V2Course}
     * @memberof V2CourseRunWithCourse
     */
    'course': V2Course;
}
/**
 * CourseRun model serializer - also serializes the parent Course.
 * @export
 * @interface V2CourseRunWithCourseRequest
 */
export interface V2CourseRunWithCourseRequest {
    /**
     * The title of the course. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V2CourseRunWithCourseRequest
     */
    'title': string;
    /**
     * The day the course begins. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V2CourseRunWithCourseRequest
     */
    'start_date'?: string | null;
    /**
     * The last day the course is active. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V2CourseRunWithCourseRequest
     */
    'end_date'?: string | null;
    /**
     * The first day students can enroll. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V2CourseRunWithCourseRequest
     */
    'enrollment_start'?: string | null;
    /**
     * The last day students can enroll. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V2CourseRunWithCourseRequest
     */
    'enrollment_end'?: string | null;
    /**
     * The date beyond which the learner should not see link to this course run on their dashboard.
     * @type {string}
     * @memberof V2CourseRunWithCourseRequest
     */
    'expiration_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V2CourseRunWithCourseRequest
     */
    'courseware_id': string;
    /**
     * The day certificates should be available to users. This value is synced automatically with edX studio.
     * @type {string}
     * @memberof V2CourseRunWithCourseRequest
     */
    'certificate_available_date'?: string | null;
    /**
     * The date beyond which the learner can not enroll in paid course mode.
     * @type {string}
     * @memberof V2CourseRunWithCourseRequest
     */
    'upgrade_deadline'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof V2CourseRunWithCourseRequest
     */
    'is_self_paced'?: boolean;
    /**
     * A string that identifies the set of runs that this run belongs to (example: \'R2\')
     * @type {string}
     * @memberof V2CourseRunWithCourseRequest
     */
    'run_tag': string;
    /**
     * 
     * @type {boolean}
     * @memberof V2CourseRunWithCourseRequest
     */
    'live'?: boolean;
    /**
     * 
     * @type {number}
     * @memberof V2CourseRunWithCourseRequest
     */
    'b2b_contract'?: number | null;
}
/**
 * Program Model Serializer v2
 * @export
 * @interface V2Program
 */
export interface V2Program {
    /**
     * 
     * @type {string}
     * @memberof V2Program
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof V2Program
     */
    'readable_id': string;
    /**
     * 
     * @type {number}
     * @memberof V2Program
     */
    'id': number;
    /**
     * 
     * @type {Array<number>}
     * @memberof V2Program
     */
    'courses': Array<number>;
    /**
     * 
     * @type {Array<number>}
     * @memberof V2Program
     */
    'collections': Array<number>;
    /**
     * 
     * @type {V2ProgramRequirements}
     * @memberof V2Program
     */
    'requirements': V2ProgramRequirements;
    /**
     * 
     * @type {Array<V2ProgramRequirement>}
     * @memberof V2Program
     */
    'req_tree': Array<V2ProgramRequirement>;
    /**
     * 
     * @type {ProgramPage}
     * @memberof V2Program
     */
    'page': ProgramPage;
    /**
     * 
     * @type {string}
     * @memberof V2Program
     */
    'program_type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V2Program
     */
    'certificate_type': string;
    /**
     * 
     * @type {Array<Department>}
     * @memberof V2Program
     */
    'departments': Array<Department>;
    /**
     * 
     * @type {boolean}
     * @memberof V2Program
     */
    'live'?: boolean;
    /**
     * 
     * @type {Array<V2ProgramTopicsInner>}
     * @memberof V2Program
     */
    'topics': Array<V2ProgramTopicsInner>;
    /**
     * 
     * @type {AvailabilityEnum}
     * @memberof V2Program
     */
    'availability'?: AvailabilityEnum;
    /**
     * Get the start date of the program by finding the first available run.
     * @type {string}
     * @memberof V2Program
     */
    'start_date': string | null;
    /**
     * 
     * @type {string}
     * @memberof V2Program
     */
    'end_date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V2Program
     */
    'enrollment_start'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V2Program
     */
    'enrollment_end'?: string | null;
    /**
     * Check if the prerequisites field is populated in the program page CMS.
     * @type {boolean}
     * @memberof V2Program
     */
    'required_prerequisites': boolean;
    /**
     * Get the length/duration field from the program page CMS.
     * @type {string}
     * @memberof V2Program
     */
    'duration': string | null;
    /**
     * Get the min weeks of the program from the CMS page.
     * @type {number}
     * @memberof V2Program
     */
    'min_weeks': number | null;
    /**
     * Get the max weeks of the program from the CMS page.
     * @type {number}
     * @memberof V2Program
     */
    'max_weeks': number | null;
    /**
     * Get the min price of the product from the CMS page.
     * @type {number}
     * @memberof V2Program
     */
    'min_price': number | null;
    /**
     * Get the max price of the product from the CMS page.
     * @type {number}
     * @memberof V2Program
     */
    'max_price': number | null;
    /**
     * Get the effort/time_commitment field from the program page CMS.
     * @type {string}
     * @memberof V2Program
     */
    'time_commitment': string | null;
    /**
     * Get the min weekly hours of the course from the course page CMS.
     * @type {string}
     * @memberof V2Program
     */
    'min_weekly_hours': string | null;
    /**
     * Get the max weekly hours of the course from the course page CMS.
     * @type {string}
     * @memberof V2Program
     */
    'max_weekly_hours': string | null;
}


/**
 * Serializer for course certificates.
 * @export
 * @interface V2ProgramCertificate
 */
export interface V2ProgramCertificate {
    /**
     * 
     * @type {PublicUser}
     * @memberof V2ProgramCertificate
     */
    'user': PublicUser;
    /**
     * 
     * @type {string}
     * @memberof V2ProgramCertificate
     */
    'uuid': string;
    /**
     * Indicates whether or not the certificate is revoked
     * @type {boolean}
     * @memberof V2ProgramCertificate
     */
    'is_revoked': boolean;
    /**
     * 
     * @type {CertificatePageModel}
     * @memberof V2ProgramCertificate
     */
    'certificate_page': CertificatePageModel;
    /**
     * 
     * @type {V2Program}
     * @memberof V2ProgramCertificate
     */
    'program': V2Program;
    /**
     * 
     * @type {number}
     * @memberof V2ProgramCertificate
     */
    'certificate_page_revision': number | null;
}
/**
 * Serializer for ProgramCollection
 * @export
 * @interface V2ProgramCollection
 */
export interface V2ProgramCollection {
    /**
     * 
     * @type {number}
     * @memberof V2ProgramCollection
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof V2ProgramCollection
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof V2ProgramCollection
     */
    'description': string;
    /**
     * 
     * @type {Array<number>}
     * @memberof V2ProgramCollection
     */
    'programs': Array<number>;
    /**
     * 
     * @type {string}
     * @memberof V2ProgramCollection
     */
    'created_on': string;
    /**
     * 
     * @type {string}
     * @memberof V2ProgramCollection
     */
    'updated_on': string;
}
/**
 * Serializer for a ProgramRequirement
 * @export
 * @interface V2ProgramRequirement
 */
export interface V2ProgramRequirement {
    /**
     * 
     * @type {number}
     * @memberof V2ProgramRequirement
     */
    'id'?: number | null;
    /**
     * 
     * @type {V2ProgramRequirementData}
     * @memberof V2ProgramRequirement
     */
    'data': V2ProgramRequirementData;
    /**
     * 
     * @type {Array<V2ProgramRequirement>}
     * @memberof V2ProgramRequirement
     */
    'children'?: Array<V2ProgramRequirement>;
}
/**
 * Serializer for ProgramRequirement data
 * @export
 * @interface V2ProgramRequirementData
 */
export interface V2ProgramRequirementData {
    /**
     * 
     * @type {V2ProgramRequirementDataNodeTypeEnum}
     * @memberof V2ProgramRequirementData
     */
    'node_type': V2ProgramRequirementDataNodeTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof V2ProgramRequirementData
     */
    'course'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V2ProgramRequirementData
     */
    'program'?: string;
    /**
     * 
     * @type {string}
     * @memberof V2ProgramRequirementData
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V2ProgramRequirementData
     */
    'operator'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof V2ProgramRequirementData
     */
    'operator_value'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof V2ProgramRequirementData
     */
    'elective_flag'?: boolean | null;
}


/**
 * * `operator` - operator * `course` - course
 * @export
 * @enum {string}
 */

export const V2ProgramRequirementDataNodeTypeEnum = {
    /**
    * operator
    */
    Operator: 'operator',
    /**
    * course
    */
    Course: 'course'
} as const;

export type V2ProgramRequirementDataNodeTypeEnum = typeof V2ProgramRequirementDataNodeTypeEnum[keyof typeof V2ProgramRequirementDataNodeTypeEnum];


/**
 * 
 * @export
 * @interface V2ProgramRequirements
 */
export interface V2ProgramRequirements {
    /**
     * 
     * @type {V2ProgramRequirementsCourses}
     * @memberof V2ProgramRequirements
     */
    'courses'?: V2ProgramRequirementsCourses;
    /**
     * 
     * @type {V2ProgramRequirementsPrograms}
     * @memberof V2ProgramRequirements
     */
    'programs'?: V2ProgramRequirementsPrograms;
}
/**
 * 
 * @export
 * @interface V2ProgramRequirementsCourses
 */
export interface V2ProgramRequirementsCourses {
    /**
     * List of required course IDs
     * @type {Array<number>}
     * @memberof V2ProgramRequirementsCourses
     */
    'required'?: Array<number>;
    /**
     * List of elective course IDs
     * @type {Array<number>}
     * @memberof V2ProgramRequirementsCourses
     */
    'electives'?: Array<number>;
}
/**
 * 
 * @export
 * @interface V2ProgramRequirementsPrograms
 */
export interface V2ProgramRequirementsPrograms {
    /**
     * List of required program IDs
     * @type {Array<number>}
     * @memberof V2ProgramRequirementsPrograms
     */
    'required'?: Array<number>;
    /**
     * List of elective program IDs
     * @type {Array<number>}
     * @memberof V2ProgramRequirementsPrograms
     */
    'electives'?: Array<number>;
}
/**
 * 
 * @export
 * @interface V2ProgramTopicsInner
 */
export interface V2ProgramTopicsInner {
    /**
     * 
     * @type {string}
     * @memberof V2ProgramTopicsInner
     */
    'name'?: string;
}
/**
 * * `None` - ---- * `2` - Less than 2 years * `5` - 2-5 years * `10` - 6 - 10 years * `15` - 11 - 15 years * `20` - 16 - 20 years * `21` - More than 20 years * `0` - Prefer not to say
 * @export
 * @enum {string}
 */

export const YearsExperienceEnum = {
    /**
    * Less than 2 years
    */
    NUMBER_2: 2,
    /**
    * 2-5 years
    */
    NUMBER_5: 5,
    /**
    * 6 - 10 years
    */
    NUMBER_10: 10,
    /**
    * 11 - 15 years
    */
    NUMBER_15: 15,
    /**
    * 16 - 20 years
    */
    NUMBER_20: 20,
    /**
    * More than 20 years
    */
    NUMBER_21: 21,
    /**
    * Prefer not to say
    */
    NUMBER_0: 0
} as const;

export type YearsExperienceEnum = typeof YearsExperienceEnum[keyof typeof YearsExperienceEnum];



/**
 * ApiApi - axios parameter creator
 * @export
 */
export const ApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Disables sharing links for the learner\'s record. This only applies to the anonymous ones; shares sent to partner schools are always allowed once they are sent.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRecordsProgramRevokeCreate: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiRecordsProgramRevokeCreate', 'id', id)
            const localVarPath = `/api/records/program/{id}/revoke/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets up a sharing link for the learner\'s record. Returns back the entire learner record.
         * @param {number} id 
         * @param {PartnerSchoolRequest} PartnerSchoolRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRecordsProgramShareCreate: async (id: number, PartnerSchoolRequest: PartnerSchoolRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiRecordsProgramShareCreate', 'id', id)
            // verify required parameter 'PartnerSchoolRequest' is not null or undefined
            assertParamExists('apiRecordsProgramShareCreate', 'PartnerSchoolRequest', PartnerSchoolRequest)
            const localVarPath = `/api/records/program/{id}/share/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PartnerSchoolRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get learner record using program ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learnerRecordRetrieveById: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('learnerRecordRetrieveById', 'id', id)
            const localVarPath = `/api/records/program/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get learner record using share UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learnerRecordRetrieveByUuid: async (uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'uuid' is not null or undefined
            assertParamExists('learnerRecordRetrieveByUuid', 'uuid', uuid)
            const localVarPath = `/api/records/shared/{uuid}/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiApi - functional programming interface
 * @export
 */
export const ApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiApiAxiosParamCreator(configuration)
    return {
        /**
         * Disables sharing links for the learner\'s record. This only applies to the anonymous ones; shares sent to partner schools are always allowed once they are sent.
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRecordsProgramRevokeCreate(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LearnerRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRecordsProgramRevokeCreate(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.apiRecordsProgramRevokeCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Sets up a sharing link for the learner\'s record. Returns back the entire learner record.
         * @param {number} id 
         * @param {PartnerSchoolRequest} PartnerSchoolRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiRecordsProgramShareCreate(id: number, PartnerSchoolRequest: PartnerSchoolRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LearnerRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiRecordsProgramShareCreate(id, PartnerSchoolRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.apiRecordsProgramShareCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get learner record using program ID
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async learnerRecordRetrieveById(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LearnerRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.learnerRecordRetrieveById(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.learnerRecordRetrieveById']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get learner record using share UUID
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async learnerRecordRetrieveByUuid(uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LearnerRecord>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.learnerRecordRetrieveByUuid(uuid, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ApiApi.learnerRecordRetrieveByUuid']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ApiApi - factory interface
 * @export
 */
export const ApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiApiFp(configuration)
    return {
        /**
         * Disables sharing links for the learner\'s record. This only applies to the anonymous ones; shares sent to partner schools are always allowed once they are sent.
         * @param {ApiApiApiRecordsProgramRevokeCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRecordsProgramRevokeCreate(requestParameters: ApiApiApiRecordsProgramRevokeCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<LearnerRecord> {
            return localVarFp.apiRecordsProgramRevokeCreate(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Sets up a sharing link for the learner\'s record. Returns back the entire learner record.
         * @param {ApiApiApiRecordsProgramShareCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiRecordsProgramShareCreate(requestParameters: ApiApiApiRecordsProgramShareCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<LearnerRecord> {
            return localVarFp.apiRecordsProgramShareCreate(requestParameters.id, requestParameters.PartnerSchoolRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Get learner record using program ID
         * @param {ApiApiLearnerRecordRetrieveByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learnerRecordRetrieveById(requestParameters: ApiApiLearnerRecordRetrieveByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<LearnerRecord> {
            return localVarFp.learnerRecordRetrieveById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get learner record using share UUID
         * @param {ApiApiLearnerRecordRetrieveByUuidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        learnerRecordRetrieveByUuid(requestParameters: ApiApiLearnerRecordRetrieveByUuidRequest, options?: RawAxiosRequestConfig): AxiosPromise<LearnerRecord> {
            return localVarFp.learnerRecordRetrieveByUuid(requestParameters.uuid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiRecordsProgramRevokeCreate operation in ApiApi.
 * @export
 * @interface ApiApiApiRecordsProgramRevokeCreateRequest
 */
export interface ApiApiApiRecordsProgramRevokeCreateRequest {
    /**
     * 
     * @type {number}
     * @memberof ApiApiApiRecordsProgramRevokeCreate
     */
    readonly id: number
}

/**
 * Request parameters for apiRecordsProgramShareCreate operation in ApiApi.
 * @export
 * @interface ApiApiApiRecordsProgramShareCreateRequest
 */
export interface ApiApiApiRecordsProgramShareCreateRequest {
    /**
     * 
     * @type {number}
     * @memberof ApiApiApiRecordsProgramShareCreate
     */
    readonly id: number

    /**
     * 
     * @type {PartnerSchoolRequest}
     * @memberof ApiApiApiRecordsProgramShareCreate
     */
    readonly PartnerSchoolRequest: PartnerSchoolRequest
}

/**
 * Request parameters for learnerRecordRetrieveById operation in ApiApi.
 * @export
 * @interface ApiApiLearnerRecordRetrieveByIdRequest
 */
export interface ApiApiLearnerRecordRetrieveByIdRequest {
    /**
     * 
     * @type {number}
     * @memberof ApiApiLearnerRecordRetrieveById
     */
    readonly id: number
}

/**
 * Request parameters for learnerRecordRetrieveByUuid operation in ApiApi.
 * @export
 * @interface ApiApiLearnerRecordRetrieveByUuidRequest
 */
export interface ApiApiLearnerRecordRetrieveByUuidRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiApiLearnerRecordRetrieveByUuid
     */
    readonly uuid: string
}

/**
 * ApiApi - object-oriented interface
 * @export
 * @class ApiApi
 * @extends {BaseAPI}
 */
export class ApiApi extends BaseAPI {
    /**
     * Disables sharing links for the learner\'s record. This only applies to the anonymous ones; shares sent to partner schools are always allowed once they are sent.
     * @param {ApiApiApiRecordsProgramRevokeCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiRecordsProgramRevokeCreate(requestParameters: ApiApiApiRecordsProgramRevokeCreateRequest, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiRecordsProgramRevokeCreate(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sets up a sharing link for the learner\'s record. Returns back the entire learner record.
     * @param {ApiApiApiRecordsProgramShareCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiRecordsProgramShareCreate(requestParameters: ApiApiApiRecordsProgramShareCreateRequest, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).apiRecordsProgramShareCreate(requestParameters.id, requestParameters.PartnerSchoolRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get learner record using program ID
     * @param {ApiApiLearnerRecordRetrieveByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public learnerRecordRetrieveById(requestParameters: ApiApiLearnerRecordRetrieveByIdRequest, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).learnerRecordRetrieveById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get learner record using share UUID
     * @param {ApiApiLearnerRecordRetrieveByUuidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public learnerRecordRetrieveByUuid(requestParameters: ApiApiLearnerRecordRetrieveByUuidRequest, options?: RawAxiosRequestConfig) {
        return ApiApiFp(this.configuration).learnerRecordRetrieveByUuid(requestParameters.uuid, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * B2bApi - axios parameter creator
 * @export
 */
export const B2bApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use the provided enrollment code to attach the user to a B2B contract.  This will not create an order, nor will it enroll the user. It will attach the user to the contract and log that the code was used for this purpose (but will _not_ invalidate the code, since we\'re not actually using it at this point).  This will respect the activation and expiration dates (of both the contract and the discount), and will make sure there\'s sufficient available seats in the contract.  If the user is already in the contract, then we skip it.  Returns: - list of ContractPageSerializer - the contracts for the user
         * @param {string} enrollment_code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2bAttachCreate: async (enrollment_code: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'enrollment_code' is not null or undefined
            assertParamExists('b2bAttachCreate', 'enrollment_code', enrollment_code)
            const localVarPath = `/api/v0/b2b/attach/{enrollment_code}/`
                .replace(`{${"enrollment_code"}}`, encodeURIComponent(String(enrollment_code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for the ContractPage model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2bContractsList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v0/b2b/contracts/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for the ContractPage model.
         * @param {string} contract_slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2bContractsRetrieve: async (contract_slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'contract_slug' is not null or undefined
            assertParamExists('b2bContractsRetrieve', 'contract_slug', contract_slug)
            const localVarPath = `/api/v0/b2b/contracts/{contract_slug}/`
                .replace(`{${"contract_slug"}}`, encodeURIComponent(String(contract_slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create an enrollment for the given course run.
         * @param {string} readable_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2bEnrollCreate: async (readable_id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'readable_id' is not null or undefined
            assertParamExists('b2bEnrollCreate', 'readable_id', readable_id)
            const localVarPath = `/api/v0/b2b/enroll/{readable_id}/`
                .replace(`{${"readable_id"}}`, encodeURIComponent(String(readable_id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for the OrganizationPage model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2bOrganizationsList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v0/b2b/organizations/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for the OrganizationPage model.
         * @param {string} organization_slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2bOrganizationsRetrieve: async (organization_slug: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'organization_slug' is not null or undefined
            assertParamExists('b2bOrganizationsRetrieve', 'organization_slug', organization_slug)
            const localVarPath = `/api/v0/b2b/organizations/{organization_slug}/`
                .replace(`{${"organization_slug"}}`, encodeURIComponent(String(organization_slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * B2bApi - functional programming interface
 * @export
 */
export const B2bApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = B2bApiAxiosParamCreator(configuration)
    return {
        /**
         * Use the provided enrollment code to attach the user to a B2B contract.  This will not create an order, nor will it enroll the user. It will attach the user to the contract and log that the code was used for this purpose (but will _not_ invalidate the code, since we\'re not actually using it at this point).  This will respect the activation and expiration dates (of both the contract and the discount), and will make sure there\'s sufficient available seats in the contract.  If the user is already in the contract, then we skip it.  Returns: - list of ContractPageSerializer - the contracts for the user
         * @param {string} enrollment_code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async b2bAttachCreate(enrollment_code: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ContractPage>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.b2bAttachCreate(enrollment_code, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['B2bApi.b2bAttachCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Viewset for the ContractPage model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async b2bContractsList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ContractPage>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.b2bContractsList(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['B2bApi.b2bContractsList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Viewset for the ContractPage model.
         * @param {string} contract_slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async b2bContractsRetrieve(contract_slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContractPage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.b2bContractsRetrieve(contract_slug, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['B2bApi.b2bContractsRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Create an enrollment for the given course run.
         * @param {string} readable_id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async b2bEnrollCreate(readable_id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateB2BEnrollment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.b2bEnrollCreate(readable_id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['B2bApi.b2bEnrollCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Viewset for the OrganizationPage model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async b2bOrganizationsList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<OrganizationPage>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.b2bOrganizationsList(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['B2bApi.b2bOrganizationsList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Viewset for the OrganizationPage model.
         * @param {string} organization_slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async b2bOrganizationsRetrieve(organization_slug: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationPage>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.b2bOrganizationsRetrieve(organization_slug, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['B2bApi.b2bOrganizationsRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * B2bApi - factory interface
 * @export
 */
export const B2bApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = B2bApiFp(configuration)
    return {
        /**
         * Use the provided enrollment code to attach the user to a B2B contract.  This will not create an order, nor will it enroll the user. It will attach the user to the contract and log that the code was used for this purpose (but will _not_ invalidate the code, since we\'re not actually using it at this point).  This will respect the activation and expiration dates (of both the contract and the discount), and will make sure there\'s sufficient available seats in the contract.  If the user is already in the contract, then we skip it.  Returns: - list of ContractPageSerializer - the contracts for the user
         * @param {B2bApiB2bAttachCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2bAttachCreate(requestParameters: B2bApiB2bAttachCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<ContractPage>> {
            return localVarFp.b2bAttachCreate(requestParameters.enrollment_code, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for the ContractPage model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2bContractsList(options?: RawAxiosRequestConfig): AxiosPromise<Array<ContractPage>> {
            return localVarFp.b2bContractsList(options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for the ContractPage model.
         * @param {B2bApiB2bContractsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2bContractsRetrieve(requestParameters: B2bApiB2bContractsRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<ContractPage> {
            return localVarFp.b2bContractsRetrieve(requestParameters.contract_slug, options).then((request) => request(axios, basePath));
        },
        /**
         * Create an enrollment for the given course run.
         * @param {B2bApiB2bEnrollCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2bEnrollCreate(requestParameters: B2bApiB2bEnrollCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<CreateB2BEnrollment> {
            return localVarFp.b2bEnrollCreate(requestParameters.readable_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for the OrganizationPage model.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2bOrganizationsList(options?: RawAxiosRequestConfig): AxiosPromise<Array<OrganizationPage>> {
            return localVarFp.b2bOrganizationsList(options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for the OrganizationPage model.
         * @param {B2bApiB2bOrganizationsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        b2bOrganizationsRetrieve(requestParameters: B2bApiB2bOrganizationsRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<OrganizationPage> {
            return localVarFp.b2bOrganizationsRetrieve(requestParameters.organization_slug, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for b2bAttachCreate operation in B2bApi.
 * @export
 * @interface B2bApiB2bAttachCreateRequest
 */
export interface B2bApiB2bAttachCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof B2bApiB2bAttachCreate
     */
    readonly enrollment_code: string
}

/**
 * Request parameters for b2bContractsRetrieve operation in B2bApi.
 * @export
 * @interface B2bApiB2bContractsRetrieveRequest
 */
export interface B2bApiB2bContractsRetrieveRequest {
    /**
     * 
     * @type {string}
     * @memberof B2bApiB2bContractsRetrieve
     */
    readonly contract_slug: string
}

/**
 * Request parameters for b2bEnrollCreate operation in B2bApi.
 * @export
 * @interface B2bApiB2bEnrollCreateRequest
 */
export interface B2bApiB2bEnrollCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof B2bApiB2bEnrollCreate
     */
    readonly readable_id: string
}

/**
 * Request parameters for b2bOrganizationsRetrieve operation in B2bApi.
 * @export
 * @interface B2bApiB2bOrganizationsRetrieveRequest
 */
export interface B2bApiB2bOrganizationsRetrieveRequest {
    /**
     * 
     * @type {string}
     * @memberof B2bApiB2bOrganizationsRetrieve
     */
    readonly organization_slug: string
}

/**
 * B2bApi - object-oriented interface
 * @export
 * @class B2bApi
 * @extends {BaseAPI}
 */
export class B2bApi extends BaseAPI {
    /**
     * Use the provided enrollment code to attach the user to a B2B contract.  This will not create an order, nor will it enroll the user. It will attach the user to the contract and log that the code was used for this purpose (but will _not_ invalidate the code, since we\'re not actually using it at this point).  This will respect the activation and expiration dates (of both the contract and the discount), and will make sure there\'s sufficient available seats in the contract.  If the user is already in the contract, then we skip it.  Returns: - list of ContractPageSerializer - the contracts for the user
     * @param {B2bApiB2bAttachCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof B2bApi
     */
    public b2bAttachCreate(requestParameters: B2bApiB2bAttachCreateRequest, options?: RawAxiosRequestConfig) {
        return B2bApiFp(this.configuration).b2bAttachCreate(requestParameters.enrollment_code, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for the ContractPage model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof B2bApi
     */
    public b2bContractsList(options?: RawAxiosRequestConfig) {
        return B2bApiFp(this.configuration).b2bContractsList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for the ContractPage model.
     * @param {B2bApiB2bContractsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof B2bApi
     */
    public b2bContractsRetrieve(requestParameters: B2bApiB2bContractsRetrieveRequest, options?: RawAxiosRequestConfig) {
        return B2bApiFp(this.configuration).b2bContractsRetrieve(requestParameters.contract_slug, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create an enrollment for the given course run.
     * @param {B2bApiB2bEnrollCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof B2bApi
     */
    public b2bEnrollCreate(requestParameters: B2bApiB2bEnrollCreateRequest, options?: RawAxiosRequestConfig) {
        return B2bApiFp(this.configuration).b2bEnrollCreate(requestParameters.readable_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for the OrganizationPage model.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof B2bApi
     */
    public b2bOrganizationsList(options?: RawAxiosRequestConfig) {
        return B2bApiFp(this.configuration).b2bOrganizationsList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for the OrganizationPage model.
     * @param {B2bApiB2bOrganizationsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof B2bApi
     */
    public b2bOrganizationsRetrieve(requestParameters: B2bApiB2bOrganizationsRetrieveRequest, options?: RawAxiosRequestConfig) {
        return B2bApiFp(this.configuration).b2bOrganizationsRetrieve(requestParameters.organization_slug, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ChangeEmailsApi - axios parameter creator
 * @export
 */
export const ChangeEmailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Viewset for creating and updating email change requests
         * @param {ChangeEmailRequestCreateRequest} ChangeEmailRequestCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeEmailsCreate: async (ChangeEmailRequestCreateRequest: ChangeEmailRequestCreateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ChangeEmailRequestCreateRequest' is not null or undefined
            assertParamExists('changeEmailsCreate', 'ChangeEmailRequestCreateRequest', ChangeEmailRequestCreateRequest)
            const localVarPath = `/api/v0/change-emails/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ChangeEmailRequestCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for creating and updating email change requests
         * @param {string} code 
         * @param {PatchedChangeEmailRequestUpdateRequest} [PatchedChangeEmailRequestUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeEmailsPartialUpdate: async (code: string, PatchedChangeEmailRequestUpdateRequest?: PatchedChangeEmailRequestUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('changeEmailsPartialUpdate', 'code', code)
            const localVarPath = `/api/v0/change-emails/{code}/`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PatchedChangeEmailRequestUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Viewset for creating and updating email change requests
         * @param {string} code 
         * @param {ChangeEmailRequestUpdateRequest} ChangeEmailRequestUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeEmailsUpdate: async (code: string, ChangeEmailRequestUpdateRequest: ChangeEmailRequestUpdateRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            assertParamExists('changeEmailsUpdate', 'code', code)
            // verify required parameter 'ChangeEmailRequestUpdateRequest' is not null or undefined
            assertParamExists('changeEmailsUpdate', 'ChangeEmailRequestUpdateRequest', ChangeEmailRequestUpdateRequest)
            const localVarPath = `/api/v0/change-emails/{code}/`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ChangeEmailRequestUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ChangeEmailsApi - functional programming interface
 * @export
 */
export const ChangeEmailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ChangeEmailsApiAxiosParamCreator(configuration)
    return {
        /**
         * Viewset for creating and updating email change requests
         * @param {ChangeEmailRequestCreateRequest} ChangeEmailRequestCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeEmailsCreate(ChangeEmailRequestCreateRequest: ChangeEmailRequestCreateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeEmailRequestCreate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeEmailsCreate(ChangeEmailRequestCreateRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ChangeEmailsApi.changeEmailsCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Viewset for creating and updating email change requests
         * @param {string} code 
         * @param {PatchedChangeEmailRequestUpdateRequest} [PatchedChangeEmailRequestUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeEmailsPartialUpdate(code: string, PatchedChangeEmailRequestUpdateRequest?: PatchedChangeEmailRequestUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeEmailRequestUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeEmailsPartialUpdate(code, PatchedChangeEmailRequestUpdateRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ChangeEmailsApi.changeEmailsPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Viewset for creating and updating email change requests
         * @param {string} code 
         * @param {ChangeEmailRequestUpdateRequest} ChangeEmailRequestUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeEmailsUpdate(code: string, ChangeEmailRequestUpdateRequest: ChangeEmailRequestUpdateRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeEmailRequestUpdate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.changeEmailsUpdate(code, ChangeEmailRequestUpdateRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ChangeEmailsApi.changeEmailsUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ChangeEmailsApi - factory interface
 * @export
 */
export const ChangeEmailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ChangeEmailsApiFp(configuration)
    return {
        /**
         * Viewset for creating and updating email change requests
         * @param {ChangeEmailsApiChangeEmailsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeEmailsCreate(requestParameters: ChangeEmailsApiChangeEmailsCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChangeEmailRequestCreate> {
            return localVarFp.changeEmailsCreate(requestParameters.ChangeEmailRequestCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for creating and updating email change requests
         * @param {ChangeEmailsApiChangeEmailsPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeEmailsPartialUpdate(requestParameters: ChangeEmailsApiChangeEmailsPartialUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChangeEmailRequestUpdate> {
            return localVarFp.changeEmailsPartialUpdate(requestParameters.code, requestParameters.PatchedChangeEmailRequestUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Viewset for creating and updating email change requests
         * @param {ChangeEmailsApiChangeEmailsUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeEmailsUpdate(requestParameters: ChangeEmailsApiChangeEmailsUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChangeEmailRequestUpdate> {
            return localVarFp.changeEmailsUpdate(requestParameters.code, requestParameters.ChangeEmailRequestUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for changeEmailsCreate operation in ChangeEmailsApi.
 * @export
 * @interface ChangeEmailsApiChangeEmailsCreateRequest
 */
export interface ChangeEmailsApiChangeEmailsCreateRequest {
    /**
     * 
     * @type {ChangeEmailRequestCreateRequest}
     * @memberof ChangeEmailsApiChangeEmailsCreate
     */
    readonly ChangeEmailRequestCreateRequest: ChangeEmailRequestCreateRequest
}

/**
 * Request parameters for changeEmailsPartialUpdate operation in ChangeEmailsApi.
 * @export
 * @interface ChangeEmailsApiChangeEmailsPartialUpdateRequest
 */
export interface ChangeEmailsApiChangeEmailsPartialUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof ChangeEmailsApiChangeEmailsPartialUpdate
     */
    readonly code: string

    /**
     * 
     * @type {PatchedChangeEmailRequestUpdateRequest}
     * @memberof ChangeEmailsApiChangeEmailsPartialUpdate
     */
    readonly PatchedChangeEmailRequestUpdateRequest?: PatchedChangeEmailRequestUpdateRequest
}

/**
 * Request parameters for changeEmailsUpdate operation in ChangeEmailsApi.
 * @export
 * @interface ChangeEmailsApiChangeEmailsUpdateRequest
 */
export interface ChangeEmailsApiChangeEmailsUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof ChangeEmailsApiChangeEmailsUpdate
     */
    readonly code: string

    /**
     * 
     * @type {ChangeEmailRequestUpdateRequest}
     * @memberof ChangeEmailsApiChangeEmailsUpdate
     */
    readonly ChangeEmailRequestUpdateRequest: ChangeEmailRequestUpdateRequest
}

/**
 * ChangeEmailsApi - object-oriented interface
 * @export
 * @class ChangeEmailsApi
 * @extends {BaseAPI}
 */
export class ChangeEmailsApi extends BaseAPI {
    /**
     * Viewset for creating and updating email change requests
     * @param {ChangeEmailsApiChangeEmailsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChangeEmailsApi
     */
    public changeEmailsCreate(requestParameters: ChangeEmailsApiChangeEmailsCreateRequest, options?: RawAxiosRequestConfig) {
        return ChangeEmailsApiFp(this.configuration).changeEmailsCreate(requestParameters.ChangeEmailRequestCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for creating and updating email change requests
     * @param {ChangeEmailsApiChangeEmailsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChangeEmailsApi
     */
    public changeEmailsPartialUpdate(requestParameters: ChangeEmailsApiChangeEmailsPartialUpdateRequest, options?: RawAxiosRequestConfig) {
        return ChangeEmailsApiFp(this.configuration).changeEmailsPartialUpdate(requestParameters.code, requestParameters.PatchedChangeEmailRequestUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Viewset for creating and updating email change requests
     * @param {ChangeEmailsApiChangeEmailsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChangeEmailsApi
     */
    public changeEmailsUpdate(requestParameters: ChangeEmailsApiChangeEmailsUpdateRequest, options?: RawAxiosRequestConfig) {
        return ChangeEmailsApiFp(this.configuration).changeEmailsUpdate(requestParameters.code, requestParameters.ChangeEmailRequestUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CountriesApi - axios parameter creator
 * @export
 */
export const CountriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get generator for countries/states list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v0/countries/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CountriesApi - functional programming interface
 * @export
 */
export const CountriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CountriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get generator for countries/states list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async countriesList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Country>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.countriesList(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CountriesApi.countriesList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * CountriesApi - factory interface
 * @export
 */
export const CountriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CountriesApiFp(configuration)
    return {
        /**
         * Get generator for countries/states list
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        countriesList(options?: RawAxiosRequestConfig): AxiosPromise<Array<Country>> {
            return localVarFp.countriesList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CountriesApi - object-oriented interface
 * @export
 * @class CountriesApi
 * @extends {BaseAPI}
 */
export class CountriesApi extends BaseAPI {
    /**
     * Get generator for countries/states list
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CountriesApi
     */
    public countriesList(options?: RawAxiosRequestConfig) {
        return CountriesApiFp(this.configuration).countriesList(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CourseCertificatesApi - axios parameter creator
 * @export
 */
export const CourseCertificatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a course certificate by UUID.
         * @param {string} cert_uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseCertificatesRetrieve: async (cert_uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cert_uuid' is not null or undefined
            assertParamExists('courseCertificatesRetrieve', 'cert_uuid', cert_uuid)
            const localVarPath = `/api/v2/course_certificates/{cert_uuid}/`
                .replace(`{${"cert_uuid"}}`, encodeURIComponent(String(cert_uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseCertificatesApi - functional programming interface
 * @export
 */
export const CourseCertificatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourseCertificatesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a course certificate by UUID.
         * @param {string} cert_uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async courseCertificatesRetrieve(cert_uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2CourseRunCertificate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.courseCertificatesRetrieve(cert_uuid, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CourseCertificatesApi.courseCertificatesRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * CourseCertificatesApi - factory interface
 * @export
 */
export const CourseCertificatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourseCertificatesApiFp(configuration)
    return {
        /**
         * Get a course certificate by UUID.
         * @param {CourseCertificatesApiCourseCertificatesRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseCertificatesRetrieve(requestParameters: CourseCertificatesApiCourseCertificatesRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2CourseRunCertificate> {
            return localVarFp.courseCertificatesRetrieve(requestParameters.cert_uuid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for courseCertificatesRetrieve operation in CourseCertificatesApi.
 * @export
 * @interface CourseCertificatesApiCourseCertificatesRetrieveRequest
 */
export interface CourseCertificatesApiCourseCertificatesRetrieveRequest {
    /**
     * 
     * @type {string}
     * @memberof CourseCertificatesApiCourseCertificatesRetrieve
     */
    readonly cert_uuid: string
}

/**
 * CourseCertificatesApi - object-oriented interface
 * @export
 * @class CourseCertificatesApi
 * @extends {BaseAPI}
 */
export class CourseCertificatesApi extends BaseAPI {
    /**
     * Get a course certificate by UUID.
     * @param {CourseCertificatesApiCourseCertificatesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseCertificatesApi
     */
    public courseCertificatesRetrieve(requestParameters: CourseCertificatesApiCourseCertificatesRetrieveRequest, options?: RawAxiosRequestConfig) {
        return CourseCertificatesApiFp(this.configuration).courseCertificatesRetrieve(requestParameters.cert_uuid, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CourseRunsApi - axios parameter creator
 * @export
 */
export const CourseRunsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * API view set for CourseRuns
         * @param {number} [id] 
         * @param {boolean} [live] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseRunsList: async (id?: number, live?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/course_runs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (live !== undefined) {
                localVarQueryParameter['live'] = live;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API view set for CourseRuns
         * @param {number} id A unique integer value identifying this course run.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseRunsRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('courseRunsRetrieve', 'id', id)
            const localVarPath = `/api/v1/course_runs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CourseRunsApi - functional programming interface
 * @export
 */
export const CourseRunsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CourseRunsApiAxiosParamCreator(configuration)
    return {
        /**
         * API view set for CourseRuns
         * @param {number} [id] 
         * @param {boolean} [live] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async courseRunsList(id?: number, live?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1CourseRunWithCourse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.courseRunsList(id, live, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CourseRunsApi.courseRunsList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * API view set for CourseRuns
         * @param {number} id A unique integer value identifying this course run.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async courseRunsRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CourseRunWithCourse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.courseRunsRetrieve(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CourseRunsApi.courseRunsRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * CourseRunsApi - factory interface
 * @export
 */
export const CourseRunsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CourseRunsApiFp(configuration)
    return {
        /**
         * API view set for CourseRuns
         * @param {CourseRunsApiCourseRunsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseRunsList(requestParameters: CourseRunsApiCourseRunsListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<V1CourseRunWithCourse>> {
            return localVarFp.courseRunsList(requestParameters.id, requestParameters.live, options).then((request) => request(axios, basePath));
        },
        /**
         * API view set for CourseRuns
         * @param {CourseRunsApiCourseRunsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        courseRunsRetrieve(requestParameters: CourseRunsApiCourseRunsRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1CourseRunWithCourse> {
            return localVarFp.courseRunsRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for courseRunsList operation in CourseRunsApi.
 * @export
 * @interface CourseRunsApiCourseRunsListRequest
 */
export interface CourseRunsApiCourseRunsListRequest {
    /**
     * 
     * @type {number}
     * @memberof CourseRunsApiCourseRunsList
     */
    readonly id?: number

    /**
     * 
     * @type {boolean}
     * @memberof CourseRunsApiCourseRunsList
     */
    readonly live?: boolean
}

/**
 * Request parameters for courseRunsRetrieve operation in CourseRunsApi.
 * @export
 * @interface CourseRunsApiCourseRunsRetrieveRequest
 */
export interface CourseRunsApiCourseRunsRetrieveRequest {
    /**
     * A unique integer value identifying this course run.
     * @type {number}
     * @memberof CourseRunsApiCourseRunsRetrieve
     */
    readonly id: number
}

/**
 * CourseRunsApi - object-oriented interface
 * @export
 * @class CourseRunsApi
 * @extends {BaseAPI}
 */
export class CourseRunsApi extends BaseAPI {
    /**
     * API view set for CourseRuns
     * @param {CourseRunsApiCourseRunsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseRunsApi
     */
    public courseRunsList(requestParameters: CourseRunsApiCourseRunsListRequest = {}, options?: RawAxiosRequestConfig) {
        return CourseRunsApiFp(this.configuration).courseRunsList(requestParameters.id, requestParameters.live, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API view set for CourseRuns
     * @param {CourseRunsApiCourseRunsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CourseRunsApi
     */
    public courseRunsRetrieve(requestParameters: CourseRunsApiCourseRunsRetrieveRequest, options?: RawAxiosRequestConfig) {
        return CourseRunsApiFp(this.configuration).courseRunsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CoursesApi - axios parameter creator
 * @export
 */
export const CoursesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List all courses - API v1
         * @param {boolean} [courserun_is_enrollable] 
         * @param {number} [id] 
         * @param {boolean} [live] 
         * @param {number} [page] A page number within the paginated result set.
         * @param {boolean} [page__live] 
         * @param {number} [page_size] Number of results to return per page.
         * @param {string} [readable_id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CoursesList: async (courserun_is_enrollable?: boolean, id?: number, live?: boolean, page?: number, page__live?: boolean, page_size?: number, readable_id?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/courses/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (courserun_is_enrollable !== undefined) {
                localVarQueryParameter['courserun_is_enrollable'] = courserun_is_enrollable;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (live !== undefined) {
                localVarQueryParameter['live'] = live;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (page__live !== undefined) {
                localVarQueryParameter['page__live'] = page__live;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }

            if (readable_id !== undefined) {
                localVarQueryParameter['readable_id'] = readable_id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific course - API v1
         * @param {number} id A unique integer value identifying this course.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CoursesRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1CoursesRetrieve', 'id', id)
            const localVarPath = `/api/v1/courses/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all courses - API v2
         * @param {boolean} [courserun_is_enrollable] Course Run Is Enrollable
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {boolean} [include_approved_financial_aid] Include approved financial assistance information
         * @param {boolean} [live] 
         * @param {number} [org_id] Only show courses belonging to this B2B/UAI organization
         * @param {number} [page] A page number within the paginated result set.
         * @param {boolean} [page__live] 
         * @param {number} [page_size] Number of results to return per page.
         * @param {string} [readable_id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CoursesList: async (courserun_is_enrollable?: boolean, id?: Array<number>, include_approved_financial_aid?: boolean, live?: boolean, org_id?: number, page?: number, page__live?: boolean, page_size?: number, readable_id?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/courses/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (courserun_is_enrollable !== undefined) {
                localVarQueryParameter['courserun_is_enrollable'] = courserun_is_enrollable;
            }

            if (id) {
                localVarQueryParameter['id'] = id.join(COLLECTION_FORMATS.csv);
            }

            if (include_approved_financial_aid !== undefined) {
                localVarQueryParameter['include_approved_financial_aid'] = include_approved_financial_aid;
            }

            if (live !== undefined) {
                localVarQueryParameter['live'] = live;
            }

            if (org_id !== undefined) {
                localVarQueryParameter['org_id'] = org_id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (page__live !== undefined) {
                localVarQueryParameter['page__live'] = page__live;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }

            if (readable_id !== undefined) {
                localVarQueryParameter['readable_id'] = readable_id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific course - API v2
         * @param {number} id A unique integer value identifying this course.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CoursesRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV2CoursesRetrieve', 'id', id)
            const localVarPath = `/api/v2/courses/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CoursesApi - functional programming interface
 * @export
 */
export const CoursesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CoursesApiAxiosParamCreator(configuration)
    return {
        /**
         * List all courses - API v1
         * @param {boolean} [courserun_is_enrollable] 
         * @param {number} [id] 
         * @param {boolean} [live] 
         * @param {number} [page] A page number within the paginated result set.
         * @param {boolean} [page__live] 
         * @param {number} [page_size] Number of results to return per page.
         * @param {string} [readable_id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CoursesList(courserun_is_enrollable?: boolean, id?: number, live?: boolean, page?: number, page__live?: boolean, page_size?: number, readable_id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedV1CourseWithCourseRunsList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CoursesList(courserun_is_enrollable, id, live, page, page__live, page_size, readable_id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CoursesApi.apiV1CoursesList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Retrieve a specific course - API v1
         * @param {number} id A unique integer value identifying this course.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1CoursesRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CourseWithCourseRuns>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1CoursesRetrieve(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CoursesApi.apiV1CoursesRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * List all courses - API v2
         * @param {boolean} [courserun_is_enrollable] Course Run Is Enrollable
         * @param {Array<number>} [id] Multiple values may be separated by commas.
         * @param {boolean} [include_approved_financial_aid] Include approved financial assistance information
         * @param {boolean} [live] 
         * @param {number} [org_id] Only show courses belonging to this B2B/UAI organization
         * @param {number} [page] A page number within the paginated result set.
         * @param {boolean} [page__live] 
         * @param {number} [page_size] Number of results to return per page.
         * @param {string} [readable_id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2CoursesList(courserun_is_enrollable?: boolean, id?: Array<number>, include_approved_financial_aid?: boolean, live?: boolean, org_id?: number, page?: number, page__live?: boolean, page_size?: number, readable_id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedCourseWithCourseRunsSerializerV2List>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2CoursesList(courserun_is_enrollable, id, include_approved_financial_aid, live, org_id, page, page__live, page_size, readable_id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CoursesApi.apiV2CoursesList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Retrieve a specific course - API v2
         * @param {number} id A unique integer value identifying this course.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV2CoursesRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseWithCourseRunsSerializerV2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV2CoursesRetrieve(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['CoursesApi.apiV2CoursesRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * CoursesApi - factory interface
 * @export
 */
export const CoursesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CoursesApiFp(configuration)
    return {
        /**
         * List all courses - API v1
         * @param {CoursesApiApiV1CoursesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CoursesList(requestParameters: CoursesApiApiV1CoursesListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedV1CourseWithCourseRunsList> {
            return localVarFp.apiV1CoursesList(requestParameters.courserun_is_enrollable, requestParameters.id, requestParameters.live, requestParameters.page, requestParameters.page__live, requestParameters.page_size, requestParameters.readable_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific course - API v1
         * @param {CoursesApiApiV1CoursesRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1CoursesRetrieve(requestParameters: CoursesApiApiV1CoursesRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<V1CourseWithCourseRuns> {
            return localVarFp.apiV1CoursesRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * List all courses - API v2
         * @param {CoursesApiApiV2CoursesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CoursesList(requestParameters: CoursesApiApiV2CoursesListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedCourseWithCourseRunsSerializerV2List> {
            return localVarFp.apiV2CoursesList(requestParameters.courserun_is_enrollable, requestParameters.id, requestParameters.include_approved_financial_aid, requestParameters.live, requestParameters.org_id, requestParameters.page, requestParameters.page__live, requestParameters.page_size, requestParameters.readable_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific course - API v2
         * @param {CoursesApiApiV2CoursesRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV2CoursesRetrieve(requestParameters: CoursesApiApiV2CoursesRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<CourseWithCourseRunsSerializerV2> {
            return localVarFp.apiV2CoursesRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1CoursesList operation in CoursesApi.
 * @export
 * @interface CoursesApiApiV1CoursesListRequest
 */
export interface CoursesApiApiV1CoursesListRequest {
    /**
     * 
     * @type {boolean}
     * @memberof CoursesApiApiV1CoursesList
     */
    readonly courserun_is_enrollable?: boolean

    /**
     * 
     * @type {number}
     * @memberof CoursesApiApiV1CoursesList
     */
    readonly id?: number

    /**
     * 
     * @type {boolean}
     * @memberof CoursesApiApiV1CoursesList
     */
    readonly live?: boolean

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof CoursesApiApiV1CoursesList
     */
    readonly page?: number

    /**
     * 
     * @type {boolean}
     * @memberof CoursesApiApiV1CoursesList
     */
    readonly page__live?: boolean

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof CoursesApiApiV1CoursesList
     */
    readonly page_size?: number

    /**
     * 
     * @type {string}
     * @memberof CoursesApiApiV1CoursesList
     */
    readonly readable_id?: string
}

/**
 * Request parameters for apiV1CoursesRetrieve operation in CoursesApi.
 * @export
 * @interface CoursesApiApiV1CoursesRetrieveRequest
 */
export interface CoursesApiApiV1CoursesRetrieveRequest {
    /**
     * A unique integer value identifying this course.
     * @type {number}
     * @memberof CoursesApiApiV1CoursesRetrieve
     */
    readonly id: number
}

/**
 * Request parameters for apiV2CoursesList operation in CoursesApi.
 * @export
 * @interface CoursesApiApiV2CoursesListRequest
 */
export interface CoursesApiApiV2CoursesListRequest {
    /**
     * Course Run Is Enrollable
     * @type {boolean}
     * @memberof CoursesApiApiV2CoursesList
     */
    readonly courserun_is_enrollable?: boolean

    /**
     * Multiple values may be separated by commas.
     * @type {Array<number>}
     * @memberof CoursesApiApiV2CoursesList
     */
    readonly id?: Array<number>

    /**
     * Include approved financial assistance information
     * @type {boolean}
     * @memberof CoursesApiApiV2CoursesList
     */
    readonly include_approved_financial_aid?: boolean

    /**
     * 
     * @type {boolean}
     * @memberof CoursesApiApiV2CoursesList
     */
    readonly live?: boolean

    /**
     * Only show courses belonging to this B2B/UAI organization
     * @type {number}
     * @memberof CoursesApiApiV2CoursesList
     */
    readonly org_id?: number

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof CoursesApiApiV2CoursesList
     */
    readonly page?: number

    /**
     * 
     * @type {boolean}
     * @memberof CoursesApiApiV2CoursesList
     */
    readonly page__live?: boolean

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof CoursesApiApiV2CoursesList
     */
    readonly page_size?: number

    /**
     * 
     * @type {string}
     * @memberof CoursesApiApiV2CoursesList
     */
    readonly readable_id?: string
}

/**
 * Request parameters for apiV2CoursesRetrieve operation in CoursesApi.
 * @export
 * @interface CoursesApiApiV2CoursesRetrieveRequest
 */
export interface CoursesApiApiV2CoursesRetrieveRequest {
    /**
     * A unique integer value identifying this course.
     * @type {number}
     * @memberof CoursesApiApiV2CoursesRetrieve
     */
    readonly id: number
}

/**
 * CoursesApi - object-oriented interface
 * @export
 * @class CoursesApi
 * @extends {BaseAPI}
 */
export class CoursesApi extends BaseAPI {
    /**
     * List all courses - API v1
     * @param {CoursesApiApiV1CoursesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public apiV1CoursesList(requestParameters: CoursesApiApiV1CoursesListRequest = {}, options?: RawAxiosRequestConfig) {
        return CoursesApiFp(this.configuration).apiV1CoursesList(requestParameters.courserun_is_enrollable, requestParameters.id, requestParameters.live, requestParameters.page, requestParameters.page__live, requestParameters.page_size, requestParameters.readable_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific course - API v1
     * @param {CoursesApiApiV1CoursesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public apiV1CoursesRetrieve(requestParameters: CoursesApiApiV1CoursesRetrieveRequest, options?: RawAxiosRequestConfig) {
        return CoursesApiFp(this.configuration).apiV1CoursesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all courses - API v2
     * @param {CoursesApiApiV2CoursesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public apiV2CoursesList(requestParameters: CoursesApiApiV2CoursesListRequest = {}, options?: RawAxiosRequestConfig) {
        return CoursesApiFp(this.configuration).apiV2CoursesList(requestParameters.courserun_is_enrollable, requestParameters.id, requestParameters.include_approved_financial_aid, requestParameters.live, requestParameters.org_id, requestParameters.page, requestParameters.page__live, requestParameters.page_size, requestParameters.readable_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific course - API v2
     * @param {CoursesApiApiV2CoursesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CoursesApi
     */
    public apiV2CoursesRetrieve(requestParameters: CoursesApiApiV2CoursesRetrieveRequest, options?: RawAxiosRequestConfig) {
        return CoursesApiFp(this.configuration).apiV2CoursesRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DepartmentsApi - axios parameter creator
 * @export
 */
export const DepartmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List departments - v1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsListV1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/departments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List departments - v2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsListV2: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/departments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get department details - v1
         * @param {number} id A unique integer value identifying this department.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsRetrieveV1: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('departmentsRetrieveV1', 'id', id)
            const localVarPath = `/api/v1/departments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get department details - v2
         * @param {number} id A unique integer value identifying this department.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsRetrieveV2: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('departmentsRetrieveV2', 'id', id)
            const localVarPath = `/api/v2/departments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DepartmentsApi - functional programming interface
 * @export
 */
export const DepartmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DepartmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * List departments - v1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async departmentsListV1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DepartmentWithCount>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.departmentsListV1(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DepartmentsApi.departmentsListV1']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * List departments - v2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async departmentsListV2(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DepartmentWithCoursesAndPrograms>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.departmentsListV2(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DepartmentsApi.departmentsListV2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get department details - v1
         * @param {number} id A unique integer value identifying this department.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async departmentsRetrieveV1(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentWithCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.departmentsRetrieveV1(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DepartmentsApi.departmentsRetrieveV1']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Get department details - v2
         * @param {number} id A unique integer value identifying this department.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async departmentsRetrieveV2(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DepartmentWithCoursesAndPrograms>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.departmentsRetrieveV2(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DepartmentsApi.departmentsRetrieveV2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DepartmentsApi - factory interface
 * @export
 */
export const DepartmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DepartmentsApiFp(configuration)
    return {
        /**
         * List departments - v1
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsListV1(options?: RawAxiosRequestConfig): AxiosPromise<Array<DepartmentWithCount>> {
            return localVarFp.departmentsListV1(options).then((request) => request(axios, basePath));
        },
        /**
         * List departments - v2
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsListV2(options?: RawAxiosRequestConfig): AxiosPromise<Array<DepartmentWithCoursesAndPrograms>> {
            return localVarFp.departmentsListV2(options).then((request) => request(axios, basePath));
        },
        /**
         * Get department details - v1
         * @param {DepartmentsApiDepartmentsRetrieveV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsRetrieveV1(requestParameters: DepartmentsApiDepartmentsRetrieveV1Request, options?: RawAxiosRequestConfig): AxiosPromise<DepartmentWithCount> {
            return localVarFp.departmentsRetrieveV1(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get department details - v2
         * @param {DepartmentsApiDepartmentsRetrieveV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        departmentsRetrieveV2(requestParameters: DepartmentsApiDepartmentsRetrieveV2Request, options?: RawAxiosRequestConfig): AxiosPromise<DepartmentWithCoursesAndPrograms> {
            return localVarFp.departmentsRetrieveV2(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for departmentsRetrieveV1 operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiDepartmentsRetrieveV1Request
 */
export interface DepartmentsApiDepartmentsRetrieveV1Request {
    /**
     * A unique integer value identifying this department.
     * @type {number}
     * @memberof DepartmentsApiDepartmentsRetrieveV1
     */
    readonly id: number
}

/**
 * Request parameters for departmentsRetrieveV2 operation in DepartmentsApi.
 * @export
 * @interface DepartmentsApiDepartmentsRetrieveV2Request
 */
export interface DepartmentsApiDepartmentsRetrieveV2Request {
    /**
     * A unique integer value identifying this department.
     * @type {number}
     * @memberof DepartmentsApiDepartmentsRetrieveV2
     */
    readonly id: number
}

/**
 * DepartmentsApi - object-oriented interface
 * @export
 * @class DepartmentsApi
 * @extends {BaseAPI}
 */
export class DepartmentsApi extends BaseAPI {
    /**
     * List departments - v1
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApi
     */
    public departmentsListV1(options?: RawAxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).departmentsListV1(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List departments - v2
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApi
     */
    public departmentsListV2(options?: RawAxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).departmentsListV2(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get department details - v1
     * @param {DepartmentsApiDepartmentsRetrieveV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApi
     */
    public departmentsRetrieveV1(requestParameters: DepartmentsApiDepartmentsRetrieveV1Request, options?: RawAxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).departmentsRetrieveV1(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get department details - v2
     * @param {DepartmentsApiDepartmentsRetrieveV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DepartmentsApi
     */
    public departmentsRetrieveV2(requestParameters: DepartmentsApiDepartmentsRetrieveV2Request, options?: RawAxiosRequestConfig) {
        return DepartmentsApiFp(this.configuration).departmentsRetrieveV2(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EnrollmentsApi - axios parameter creator
 * @export
 */
export const EnrollmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * View to handle direct POST requests to enroll in a course run.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEnrollmentsCreate: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/enrollments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API view set for user enrollments
         * @param {CourseRunEnrollmentRequest} CourseRunEnrollmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollmentsCreate: async (CourseRunEnrollmentRequest: CourseRunEnrollmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CourseRunEnrollmentRequest' is not null or undefined
            assertParamExists('enrollmentsCreate', 'CourseRunEnrollmentRequest', CourseRunEnrollmentRequest)
            const localVarPath = `/api/v1/enrollments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(CourseRunEnrollmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API view set for user enrollments
         * @param {number} id A unique integer value identifying this course run enrollment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollmentsDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('enrollmentsDestroy', 'id', id)
            const localVarPath = `/api/v1/enrollments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API view set for user enrollments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollmentsList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/enrollments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update enrollment email preferences
         * @param {number} id A unique integer value identifying this course run enrollment.
         * @param {PatchedUpdateCourseRunEnrollmentRequest} [PatchedUpdateCourseRunEnrollmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollmentsPartialUpdate: async (id: number, PatchedUpdateCourseRunEnrollmentRequest?: PatchedUpdateCourseRunEnrollmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('enrollmentsPartialUpdate', 'id', id)
            const localVarPath = `/api/v1/enrollments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PatchedUpdateCourseRunEnrollmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API view set for user enrollments
         * @param {number} id A unique integer value identifying this course run enrollment.
         * @param {CourseRunEnrollmentRequest} CourseRunEnrollmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollmentsUpdate: async (id: number, CourseRunEnrollmentRequest: CourseRunEnrollmentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('enrollmentsUpdate', 'id', id)
            // verify required parameter 'CourseRunEnrollmentRequest' is not null or undefined
            assertParamExists('enrollmentsUpdate', 'CourseRunEnrollmentRequest', CourseRunEnrollmentRequest)
            const localVarPath = `/api/v1/enrollments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(CourseRunEnrollmentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new user enrollment - API v2
         * @param {CourseRunEnrollmentRequestV2Request} CourseRunEnrollmentRequestV2Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userEnrollmentsCreateV2: async (CourseRunEnrollmentRequestV2Request: CourseRunEnrollmentRequestV2Request, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'CourseRunEnrollmentRequestV2Request' is not null or undefined
            assertParamExists('userEnrollmentsCreateV2', 'CourseRunEnrollmentRequestV2Request', CourseRunEnrollmentRequestV2Request)
            const localVarPath = `/api/v2/enrollments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(CourseRunEnrollmentRequestV2Request, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Unenroll from a course - API v2
         * @param {number} id A unique integer value identifying this course run enrollment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userEnrollmentsDestroyV2: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userEnrollmentsDestroyV2', 'id', id)
            const localVarPath = `/api/v2/enrollments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List user enrollments with B2B organization and contract information - API v2. Use ?exclude_b2b=true to filter out enrollments linked to course runs with B2B contracts. Use ?org_id=<id> to filter enrollments by specific B2B organization.
         * @param {boolean} [exclude_b2b] Exclude B2B enrollments (enrollments linked to course runs with B2B contracts)
         * @param {number} [org_id] Filter by B2B organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userEnrollmentsListV2: async (exclude_b2b?: boolean, org_id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/enrollments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (exclude_b2b !== undefined) {
                localVarQueryParameter['exclude_b2b'] = exclude_b2b;
            }

            if (org_id !== undefined) {
                localVarQueryParameter['org_id'] = org_id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnrollmentsApi - functional programming interface
 * @export
 */
export const EnrollmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EnrollmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * View to handle direct POST requests to enroll in a course run.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiEnrollmentsCreate(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiEnrollmentsCreate(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EnrollmentsApi.apiEnrollmentsCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * API view set for user enrollments
         * @param {CourseRunEnrollmentRequest} CourseRunEnrollmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enrollmentsCreate(CourseRunEnrollmentRequest: CourseRunEnrollmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseRunEnrollment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.enrollmentsCreate(CourseRunEnrollmentRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EnrollmentsApi.enrollmentsCreate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * API view set for user enrollments
         * @param {number} id A unique integer value identifying this course run enrollment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enrollmentsDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.enrollmentsDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EnrollmentsApi.enrollmentsDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * API view set for user enrollments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enrollmentsList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CourseRunEnrollment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.enrollmentsList(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EnrollmentsApi.enrollmentsList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Update enrollment email preferences
         * @param {number} id A unique integer value identifying this course run enrollment.
         * @param {PatchedUpdateCourseRunEnrollmentRequest} [PatchedUpdateCourseRunEnrollmentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enrollmentsPartialUpdate(id: number, PatchedUpdateCourseRunEnrollmentRequest?: PatchedUpdateCourseRunEnrollmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseRunEnrollment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.enrollmentsPartialUpdate(id, PatchedUpdateCourseRunEnrollmentRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EnrollmentsApi.enrollmentsPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * API view set for user enrollments
         * @param {number} id A unique integer value identifying this course run enrollment.
         * @param {CourseRunEnrollmentRequest} CourseRunEnrollmentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async enrollmentsUpdate(id: number, CourseRunEnrollmentRequest: CourseRunEnrollmentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseRunEnrollment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.enrollmentsUpdate(id, CourseRunEnrollmentRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EnrollmentsApi.enrollmentsUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Create a new user enrollment - API v2
         * @param {CourseRunEnrollmentRequestV2Request} CourseRunEnrollmentRequestV2Request 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userEnrollmentsCreateV2(CourseRunEnrollmentRequestV2Request: CourseRunEnrollmentRequestV2Request, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CourseRunEnrollmentRequestV2>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userEnrollmentsCreateV2(CourseRunEnrollmentRequestV2Request, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EnrollmentsApi.userEnrollmentsCreateV2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Unenroll from a course - API v2
         * @param {number} id A unique integer value identifying this course run enrollment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userEnrollmentsDestroyV2(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userEnrollmentsDestroyV2(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EnrollmentsApi.userEnrollmentsDestroyV2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * List user enrollments with B2B organization and contract information - API v2. Use ?exclude_b2b=true to filter out enrollments linked to course runs with B2B contracts. Use ?org_id=<id> to filter enrollments by specific B2B organization.
         * @param {boolean} [exclude_b2b] Exclude B2B enrollments (enrollments linked to course runs with B2B contracts)
         * @param {number} [org_id] Filter by B2B organization ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userEnrollmentsListV2(exclude_b2b?: boolean, org_id?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CourseRunEnrollmentRequestV2>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userEnrollmentsListV2(exclude_b2b, org_id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EnrollmentsApi.userEnrollmentsListV2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * EnrollmentsApi - factory interface
 * @export
 */
export const EnrollmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EnrollmentsApiFp(configuration)
    return {
        /**
         * View to handle direct POST requests to enroll in a course run.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiEnrollmentsCreate(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.apiEnrollmentsCreate(options).then((request) => request(axios, basePath));
        },
        /**
         * API view set for user enrollments
         * @param {EnrollmentsApiEnrollmentsCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollmentsCreate(requestParameters: EnrollmentsApiEnrollmentsCreateRequest, options?: RawAxiosRequestConfig): AxiosPromise<CourseRunEnrollment> {
            return localVarFp.enrollmentsCreate(requestParameters.CourseRunEnrollmentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * API view set for user enrollments
         * @param {EnrollmentsApiEnrollmentsDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollmentsDestroy(requestParameters: EnrollmentsApiEnrollmentsDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.enrollmentsDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * API view set for user enrollments
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollmentsList(options?: RawAxiosRequestConfig): AxiosPromise<Array<CourseRunEnrollment>> {
            return localVarFp.enrollmentsList(options).then((request) => request(axios, basePath));
        },
        /**
         * Update enrollment email preferences
         * @param {EnrollmentsApiEnrollmentsPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollmentsPartialUpdate(requestParameters: EnrollmentsApiEnrollmentsPartialUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<CourseRunEnrollment> {
            return localVarFp.enrollmentsPartialUpdate(requestParameters.id, requestParameters.PatchedUpdateCourseRunEnrollmentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * API view set for user enrollments
         * @param {EnrollmentsApiEnrollmentsUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        enrollmentsUpdate(requestParameters: EnrollmentsApiEnrollmentsUpdateRequest, options?: RawAxiosRequestConfig): AxiosPromise<CourseRunEnrollment> {
            return localVarFp.enrollmentsUpdate(requestParameters.id, requestParameters.CourseRunEnrollmentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user enrollment - API v2
         * @param {EnrollmentsApiUserEnrollmentsCreateV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userEnrollmentsCreateV2(requestParameters: EnrollmentsApiUserEnrollmentsCreateV2Request, options?: RawAxiosRequestConfig): AxiosPromise<CourseRunEnrollmentRequestV2> {
            return localVarFp.userEnrollmentsCreateV2(requestParameters.CourseRunEnrollmentRequestV2Request, options).then((request) => request(axios, basePath));
        },
        /**
         * Unenroll from a course - API v2
         * @param {EnrollmentsApiUserEnrollmentsDestroyV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userEnrollmentsDestroyV2(requestParameters: EnrollmentsApiUserEnrollmentsDestroyV2Request, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.userEnrollmentsDestroyV2(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * List user enrollments with B2B organization and contract information - API v2. Use ?exclude_b2b=true to filter out enrollments linked to course runs with B2B contracts. Use ?org_id=<id> to filter enrollments by specific B2B organization.
         * @param {EnrollmentsApiUserEnrollmentsListV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userEnrollmentsListV2(requestParameters: EnrollmentsApiUserEnrollmentsListV2Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<CourseRunEnrollmentRequestV2>> {
            return localVarFp.userEnrollmentsListV2(requestParameters.exclude_b2b, requestParameters.org_id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for enrollmentsCreate operation in EnrollmentsApi.
 * @export
 * @interface EnrollmentsApiEnrollmentsCreateRequest
 */
export interface EnrollmentsApiEnrollmentsCreateRequest {
    /**
     * 
     * @type {CourseRunEnrollmentRequest}
     * @memberof EnrollmentsApiEnrollmentsCreate
     */
    readonly CourseRunEnrollmentRequest: CourseRunEnrollmentRequest
}

/**
 * Request parameters for enrollmentsDestroy operation in EnrollmentsApi.
 * @export
 * @interface EnrollmentsApiEnrollmentsDestroyRequest
 */
export interface EnrollmentsApiEnrollmentsDestroyRequest {
    /**
     * A unique integer value identifying this course run enrollment.
     * @type {number}
     * @memberof EnrollmentsApiEnrollmentsDestroy
     */
    readonly id: number
}

/**
 * Request parameters for enrollmentsPartialUpdate operation in EnrollmentsApi.
 * @export
 * @interface EnrollmentsApiEnrollmentsPartialUpdateRequest
 */
export interface EnrollmentsApiEnrollmentsPartialUpdateRequest {
    /**
     * A unique integer value identifying this course run enrollment.
     * @type {number}
     * @memberof EnrollmentsApiEnrollmentsPartialUpdate
     */
    readonly id: number

    /**
     * 
     * @type {PatchedUpdateCourseRunEnrollmentRequest}
     * @memberof EnrollmentsApiEnrollmentsPartialUpdate
     */
    readonly PatchedUpdateCourseRunEnrollmentRequest?: PatchedUpdateCourseRunEnrollmentRequest
}

/**
 * Request parameters for enrollmentsUpdate operation in EnrollmentsApi.
 * @export
 * @interface EnrollmentsApiEnrollmentsUpdateRequest
 */
export interface EnrollmentsApiEnrollmentsUpdateRequest {
    /**
     * A unique integer value identifying this course run enrollment.
     * @type {number}
     * @memberof EnrollmentsApiEnrollmentsUpdate
     */
    readonly id: number

    /**
     * 
     * @type {CourseRunEnrollmentRequest}
     * @memberof EnrollmentsApiEnrollmentsUpdate
     */
    readonly CourseRunEnrollmentRequest: CourseRunEnrollmentRequest
}

/**
 * Request parameters for userEnrollmentsCreateV2 operation in EnrollmentsApi.
 * @export
 * @interface EnrollmentsApiUserEnrollmentsCreateV2Request
 */
export interface EnrollmentsApiUserEnrollmentsCreateV2Request {
    /**
     * 
     * @type {CourseRunEnrollmentRequestV2Request}
     * @memberof EnrollmentsApiUserEnrollmentsCreateV2
     */
    readonly CourseRunEnrollmentRequestV2Request: CourseRunEnrollmentRequestV2Request
}

/**
 * Request parameters for userEnrollmentsDestroyV2 operation in EnrollmentsApi.
 * @export
 * @interface EnrollmentsApiUserEnrollmentsDestroyV2Request
 */
export interface EnrollmentsApiUserEnrollmentsDestroyV2Request {
    /**
     * A unique integer value identifying this course run enrollment.
     * @type {number}
     * @memberof EnrollmentsApiUserEnrollmentsDestroyV2
     */
    readonly id: number
}

/**
 * Request parameters for userEnrollmentsListV2 operation in EnrollmentsApi.
 * @export
 * @interface EnrollmentsApiUserEnrollmentsListV2Request
 */
export interface EnrollmentsApiUserEnrollmentsListV2Request {
    /**
     * Exclude B2B enrollments (enrollments linked to course runs with B2B contracts)
     * @type {boolean}
     * @memberof EnrollmentsApiUserEnrollmentsListV2
     */
    readonly exclude_b2b?: boolean

    /**
     * Filter by B2B organization ID
     * @type {number}
     * @memberof EnrollmentsApiUserEnrollmentsListV2
     */
    readonly org_id?: number
}

/**
 * EnrollmentsApi - object-oriented interface
 * @export
 * @class EnrollmentsApi
 * @extends {BaseAPI}
 */
export class EnrollmentsApi extends BaseAPI {
    /**
     * View to handle direct POST requests to enroll in a course run.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrollmentsApi
     */
    public apiEnrollmentsCreate(options?: RawAxiosRequestConfig) {
        return EnrollmentsApiFp(this.configuration).apiEnrollmentsCreate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API view set for user enrollments
     * @param {EnrollmentsApiEnrollmentsCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrollmentsApi
     */
    public enrollmentsCreate(requestParameters: EnrollmentsApiEnrollmentsCreateRequest, options?: RawAxiosRequestConfig) {
        return EnrollmentsApiFp(this.configuration).enrollmentsCreate(requestParameters.CourseRunEnrollmentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API view set for user enrollments
     * @param {EnrollmentsApiEnrollmentsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrollmentsApi
     */
    public enrollmentsDestroy(requestParameters: EnrollmentsApiEnrollmentsDestroyRequest, options?: RawAxiosRequestConfig) {
        return EnrollmentsApiFp(this.configuration).enrollmentsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API view set for user enrollments
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrollmentsApi
     */
    public enrollmentsList(options?: RawAxiosRequestConfig) {
        return EnrollmentsApiFp(this.configuration).enrollmentsList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update enrollment email preferences
     * @param {EnrollmentsApiEnrollmentsPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrollmentsApi
     */
    public enrollmentsPartialUpdate(requestParameters: EnrollmentsApiEnrollmentsPartialUpdateRequest, options?: RawAxiosRequestConfig) {
        return EnrollmentsApiFp(this.configuration).enrollmentsPartialUpdate(requestParameters.id, requestParameters.PatchedUpdateCourseRunEnrollmentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API view set for user enrollments
     * @param {EnrollmentsApiEnrollmentsUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrollmentsApi
     */
    public enrollmentsUpdate(requestParameters: EnrollmentsApiEnrollmentsUpdateRequest, options?: RawAxiosRequestConfig) {
        return EnrollmentsApiFp(this.configuration).enrollmentsUpdate(requestParameters.id, requestParameters.CourseRunEnrollmentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new user enrollment - API v2
     * @param {EnrollmentsApiUserEnrollmentsCreateV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrollmentsApi
     */
    public userEnrollmentsCreateV2(requestParameters: EnrollmentsApiUserEnrollmentsCreateV2Request, options?: RawAxiosRequestConfig) {
        return EnrollmentsApiFp(this.configuration).userEnrollmentsCreateV2(requestParameters.CourseRunEnrollmentRequestV2Request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Unenroll from a course - API v2
     * @param {EnrollmentsApiUserEnrollmentsDestroyV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrollmentsApi
     */
    public userEnrollmentsDestroyV2(requestParameters: EnrollmentsApiUserEnrollmentsDestroyV2Request, options?: RawAxiosRequestConfig) {
        return EnrollmentsApiFp(this.configuration).userEnrollmentsDestroyV2(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List user enrollments with B2B organization and contract information - API v2. Use ?exclude_b2b=true to filter out enrollments linked to course runs with B2B contracts. Use ?org_id=<id> to filter enrollments by specific B2B organization.
     * @param {EnrollmentsApiUserEnrollmentsListV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnrollmentsApi
     */
    public userEnrollmentsListV2(requestParameters: EnrollmentsApiUserEnrollmentsListV2Request = {}, options?: RawAxiosRequestConfig) {
        return EnrollmentsApiFp(this.configuration).userEnrollmentsListV2(requestParameters.exclude_b2b, requestParameters.org_id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PagesApi - axios parameter creator
 * @export
 */
export const PagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns pages of all types
         * @summary List all Wagtail Pages
         * @param {string} [fields] Specify fields (e.g. &#x60;*&#x60;)
         * @param {string} [type] Filter by Wagtail page type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesList: async (fields?: string, type?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/pages/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns details of a specific Wagtail page by ID
         * @summary Get Wagtail Page Details
         * @param {number} id ID of the Wagtail page
         * @param {number} [revision_id] Optional certificate revision ID to retrieve a specific revision of the certificate page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesRetrieve: async (id: number, revision_id?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('pagesRetrieve', 'id', id)
            const localVarPath = `/api/v2/pages/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (revision_id !== undefined) {
                localVarQueryParameter['revision_id'] = revision_id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns pages of type cms.CertificatePage
         * @summary List all Certificate Pages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesfieldstypecmsCertificatePageRetrieve: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/pages/?fields=*&type=cms.CertificatePage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns pages of type cms.CoursePage
         * @summary List all Course Pages
         * @param {string} [readable_id] filter by course readable_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesfieldstypecmsCoursePageRetrieve: async (readable_id?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/pages/?fields=*&type=cms.CoursePage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (readable_id !== undefined) {
                localVarQueryParameter['readable_id'] = readable_id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns pages of type cms.ProgramPage
         * @summary List all Program Pages
         * @param {string} [readable_id] filter by program readable_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesfieldstypecmsProgramPageRetrieve: async (readable_id?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/pages/?fields=*&type=cms.ProgramPage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (readable_id !== undefined) {
                localVarQueryParameter['readable_id'] = readable_id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PagesApi - functional programming interface
 * @export
 */
export const PagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns pages of all types
         * @summary List all Wagtail Pages
         * @param {string} [fields] Specify fields (e.g. &#x60;*&#x60;)
         * @param {string} [type] Filter by Wagtail page type
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pagesList(fields?: string, type?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pagesList(fields, type, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PagesApi.pagesList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Returns details of a specific Wagtail page by ID
         * @summary Get Wagtail Page Details
         * @param {number} id ID of the Wagtail page
         * @param {number} [revision_id] Optional certificate revision ID to retrieve a specific revision of the certificate page
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pagesRetrieve(id: number, revision_id?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PagesRetrieve200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pagesRetrieve(id, revision_id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PagesApi.pagesRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Returns pages of type cms.CertificatePage
         * @summary List all Certificate Pages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pagesfieldstypecmsCertificatePageRetrieve(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CertificatePageList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pagesfieldstypecmsCertificatePageRetrieve(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PagesApi.pagesfieldstypecmsCertificatePageRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Returns pages of type cms.CoursePage
         * @summary List all Course Pages
         * @param {string} [readable_id] filter by course readable_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pagesfieldstypecmsCoursePageRetrieve(readable_id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CoursePageList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pagesfieldstypecmsCoursePageRetrieve(readable_id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PagesApi.pagesfieldstypecmsCoursePageRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Returns pages of type cms.ProgramPage
         * @summary List all Program Pages
         * @param {string} [readable_id] filter by program readable_id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pagesfieldstypecmsProgramPageRetrieve(readable_id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProgramPageList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pagesfieldstypecmsProgramPageRetrieve(readable_id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['PagesApi.pagesfieldstypecmsProgramPageRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * PagesApi - factory interface
 * @export
 */
export const PagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PagesApiFp(configuration)
    return {
        /**
         * Returns pages of all types
         * @summary List all Wagtail Pages
         * @param {PagesApiPagesListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesList(requestParameters: PagesApiPagesListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PageList> {
            return localVarFp.pagesList(requestParameters.fields, requestParameters.type, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns details of a specific Wagtail page by ID
         * @summary Get Wagtail Page Details
         * @param {PagesApiPagesRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesRetrieve(requestParameters: PagesApiPagesRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<PagesRetrieve200Response> {
            return localVarFp.pagesRetrieve(requestParameters.id, requestParameters.revision_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns pages of type cms.CertificatePage
         * @summary List all Certificate Pages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesfieldstypecmsCertificatePageRetrieve(options?: RawAxiosRequestConfig): AxiosPromise<CertificatePageList> {
            return localVarFp.pagesfieldstypecmsCertificatePageRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns pages of type cms.CoursePage
         * @summary List all Course Pages
         * @param {PagesApiPagesfieldstypecmsCoursePageRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesfieldstypecmsCoursePageRetrieve(requestParameters: PagesApiPagesfieldstypecmsCoursePageRetrieveRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<CoursePageList> {
            return localVarFp.pagesfieldstypecmsCoursePageRetrieve(requestParameters.readable_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns pages of type cms.ProgramPage
         * @summary List all Program Pages
         * @param {PagesApiPagesfieldstypecmsProgramPageRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pagesfieldstypecmsProgramPageRetrieve(requestParameters: PagesApiPagesfieldstypecmsProgramPageRetrieveRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ProgramPageList> {
            return localVarFp.pagesfieldstypecmsProgramPageRetrieve(requestParameters.readable_id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for pagesList operation in PagesApi.
 * @export
 * @interface PagesApiPagesListRequest
 */
export interface PagesApiPagesListRequest {
    /**
     * Specify fields (e.g. &#x60;*&#x60;)
     * @type {string}
     * @memberof PagesApiPagesList
     */
    readonly fields?: string

    /**
     * Filter by Wagtail page type
     * @type {string}
     * @memberof PagesApiPagesList
     */
    readonly type?: string
}

/**
 * Request parameters for pagesRetrieve operation in PagesApi.
 * @export
 * @interface PagesApiPagesRetrieveRequest
 */
export interface PagesApiPagesRetrieveRequest {
    /**
     * ID of the Wagtail page
     * @type {number}
     * @memberof PagesApiPagesRetrieve
     */
    readonly id: number

    /**
     * Optional certificate revision ID to retrieve a specific revision of the certificate page
     * @type {number}
     * @memberof PagesApiPagesRetrieve
     */
    readonly revision_id?: number
}

/**
 * Request parameters for pagesfieldstypecmsCoursePageRetrieve operation in PagesApi.
 * @export
 * @interface PagesApiPagesfieldstypecmsCoursePageRetrieveRequest
 */
export interface PagesApiPagesfieldstypecmsCoursePageRetrieveRequest {
    /**
     * filter by course readable_id
     * @type {string}
     * @memberof PagesApiPagesfieldstypecmsCoursePageRetrieve
     */
    readonly readable_id?: string
}

/**
 * Request parameters for pagesfieldstypecmsProgramPageRetrieve operation in PagesApi.
 * @export
 * @interface PagesApiPagesfieldstypecmsProgramPageRetrieveRequest
 */
export interface PagesApiPagesfieldstypecmsProgramPageRetrieveRequest {
    /**
     * filter by program readable_id
     * @type {string}
     * @memberof PagesApiPagesfieldstypecmsProgramPageRetrieve
     */
    readonly readable_id?: string
}

/**
 * PagesApi - object-oriented interface
 * @export
 * @class PagesApi
 * @extends {BaseAPI}
 */
export class PagesApi extends BaseAPI {
    /**
     * Returns pages of all types
     * @summary List all Wagtail Pages
     * @param {PagesApiPagesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApi
     */
    public pagesList(requestParameters: PagesApiPagesListRequest = {}, options?: RawAxiosRequestConfig) {
        return PagesApiFp(this.configuration).pagesList(requestParameters.fields, requestParameters.type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns details of a specific Wagtail page by ID
     * @summary Get Wagtail Page Details
     * @param {PagesApiPagesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApi
     */
    public pagesRetrieve(requestParameters: PagesApiPagesRetrieveRequest, options?: RawAxiosRequestConfig) {
        return PagesApiFp(this.configuration).pagesRetrieve(requestParameters.id, requestParameters.revision_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns pages of type cms.CertificatePage
     * @summary List all Certificate Pages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApi
     */
    public pagesfieldstypecmsCertificatePageRetrieve(options?: RawAxiosRequestConfig) {
        return PagesApiFp(this.configuration).pagesfieldstypecmsCertificatePageRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns pages of type cms.CoursePage
     * @summary List all Course Pages
     * @param {PagesApiPagesfieldstypecmsCoursePageRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApi
     */
    public pagesfieldstypecmsCoursePageRetrieve(requestParameters: PagesApiPagesfieldstypecmsCoursePageRetrieveRequest = {}, options?: RawAxiosRequestConfig) {
        return PagesApiFp(this.configuration).pagesfieldstypecmsCoursePageRetrieve(requestParameters.readable_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns pages of type cms.ProgramPage
     * @summary List all Program Pages
     * @param {PagesApiPagesfieldstypecmsProgramPageRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApi
     */
    public pagesfieldstypecmsProgramPageRetrieve(requestParameters: PagesApiPagesfieldstypecmsProgramPageRetrieveRequest = {}, options?: RawAxiosRequestConfig) {
        return PagesApiFp(this.configuration).pagesfieldstypecmsProgramPageRetrieve(requestParameters.readable_id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProgramCertificatesApi - axios parameter creator
 * @export
 */
export const ProgramCertificatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a program certificate by UUID.
         * @param {string} cert_uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programCertificatesRetrieve: async (cert_uuid: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cert_uuid' is not null or undefined
            assertParamExists('programCertificatesRetrieve', 'cert_uuid', cert_uuid)
            const localVarPath = `/api/v2/program_certificates/{cert_uuid}/`
                .replace(`{${"cert_uuid"}}`, encodeURIComponent(String(cert_uuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProgramCertificatesApi - functional programming interface
 * @export
 */
export const ProgramCertificatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProgramCertificatesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a program certificate by UUID.
         * @param {string} cert_uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async programCertificatesRetrieve(cert_uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ProgramCertificate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.programCertificatesRetrieve(cert_uuid, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProgramCertificatesApi.programCertificatesRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ProgramCertificatesApi - factory interface
 * @export
 */
export const ProgramCertificatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProgramCertificatesApiFp(configuration)
    return {
        /**
         * Get a program certificate by UUID.
         * @param {ProgramCertificatesApiProgramCertificatesRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programCertificatesRetrieve(requestParameters: ProgramCertificatesApiProgramCertificatesRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2ProgramCertificate> {
            return localVarFp.programCertificatesRetrieve(requestParameters.cert_uuid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for programCertificatesRetrieve operation in ProgramCertificatesApi.
 * @export
 * @interface ProgramCertificatesApiProgramCertificatesRetrieveRequest
 */
export interface ProgramCertificatesApiProgramCertificatesRetrieveRequest {
    /**
     * 
     * @type {string}
     * @memberof ProgramCertificatesApiProgramCertificatesRetrieve
     */
    readonly cert_uuid: string
}

/**
 * ProgramCertificatesApi - object-oriented interface
 * @export
 * @class ProgramCertificatesApi
 * @extends {BaseAPI}
 */
export class ProgramCertificatesApi extends BaseAPI {
    /**
     * Get a program certificate by UUID.
     * @param {ProgramCertificatesApiProgramCertificatesRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramCertificatesApi
     */
    public programCertificatesRetrieve(requestParameters: ProgramCertificatesApiProgramCertificatesRetrieveRequest, options?: RawAxiosRequestConfig) {
        return ProgramCertificatesApiFp(this.configuration).programCertificatesRetrieve(requestParameters.cert_uuid, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProgramCollectionsApi - axios parameter creator
 * @export
 */
export const ProgramCollectionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Readonly viewset for ProgramCollection objects.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [page_size] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programCollectionsList: async (page?: number, page_size?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/program-collections/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Readonly viewset for ProgramCollection objects.
         * @param {number} id A unique integer value identifying this Program Collection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programCollectionsRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('programCollectionsRetrieve', 'id', id)
            const localVarPath = `/api/v2/program-collections/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProgramCollectionsApi - functional programming interface
 * @export
 */
export const ProgramCollectionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProgramCollectionsApiAxiosParamCreator(configuration)
    return {
        /**
         * Readonly viewset for ProgramCollection objects.
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [page_size] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async programCollectionsList(page?: number, page_size?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedV2ProgramCollectionList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.programCollectionsList(page, page_size, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProgramCollectionsApi.programCollectionsList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Readonly viewset for ProgramCollection objects.
         * @param {number} id A unique integer value identifying this Program Collection.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async programCollectionsRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2ProgramCollection>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.programCollectionsRetrieve(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProgramCollectionsApi.programCollectionsRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ProgramCollectionsApi - factory interface
 * @export
 */
export const ProgramCollectionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProgramCollectionsApiFp(configuration)
    return {
        /**
         * Readonly viewset for ProgramCollection objects.
         * @param {ProgramCollectionsApiProgramCollectionsListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programCollectionsList(requestParameters: ProgramCollectionsApiProgramCollectionsListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedV2ProgramCollectionList> {
            return localVarFp.programCollectionsList(requestParameters.page, requestParameters.page_size, options).then((request) => request(axios, basePath));
        },
        /**
         * Readonly viewset for ProgramCollection objects.
         * @param {ProgramCollectionsApiProgramCollectionsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programCollectionsRetrieve(requestParameters: ProgramCollectionsApiProgramCollectionsRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<V2ProgramCollection> {
            return localVarFp.programCollectionsRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for programCollectionsList operation in ProgramCollectionsApi.
 * @export
 * @interface ProgramCollectionsApiProgramCollectionsListRequest
 */
export interface ProgramCollectionsApiProgramCollectionsListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof ProgramCollectionsApiProgramCollectionsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof ProgramCollectionsApiProgramCollectionsList
     */
    readonly page_size?: number
}

/**
 * Request parameters for programCollectionsRetrieve operation in ProgramCollectionsApi.
 * @export
 * @interface ProgramCollectionsApiProgramCollectionsRetrieveRequest
 */
export interface ProgramCollectionsApiProgramCollectionsRetrieveRequest {
    /**
     * A unique integer value identifying this Program Collection.
     * @type {number}
     * @memberof ProgramCollectionsApiProgramCollectionsRetrieve
     */
    readonly id: number
}

/**
 * ProgramCollectionsApi - object-oriented interface
 * @export
 * @class ProgramCollectionsApi
 * @extends {BaseAPI}
 */
export class ProgramCollectionsApi extends BaseAPI {
    /**
     * Readonly viewset for ProgramCollection objects.
     * @param {ProgramCollectionsApiProgramCollectionsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramCollectionsApi
     */
    public programCollectionsList(requestParameters: ProgramCollectionsApiProgramCollectionsListRequest = {}, options?: RawAxiosRequestConfig) {
        return ProgramCollectionsApiFp(this.configuration).programCollectionsList(requestParameters.page, requestParameters.page_size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Readonly viewset for ProgramCollection objects.
     * @param {ProgramCollectionsApiProgramCollectionsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramCollectionsApi
     */
    public programCollectionsRetrieve(requestParameters: ProgramCollectionsApiProgramCollectionsRetrieveRequest, options?: RawAxiosRequestConfig) {
        return ProgramCollectionsApiFp(this.configuration).programCollectionsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProgramEnrollmentsApi - axios parameter creator
 * @export
 */
export const ProgramEnrollmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Unenroll the user from this program. This is simpler than the corresponding function for CourseRunEnrollments; edX doesn\'t really know what programs are so there\'s nothing to process there.
         * @param {number} id Program enrollment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programEnrollmentsDestroy: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('programEnrollmentsDestroy', 'id', id)
            const localVarPath = `/api/v1/program_enrollments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a unified set of program and course enrollments for the current user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programEnrollmentsList: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/program_enrollments/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a specific program enrollment.
         * @param {number} id Program enrollment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programEnrollmentsRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('programEnrollmentsRetrieve', 'id', id)
            const localVarPath = `/api/v1/program_enrollments/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProgramEnrollmentsApi - functional programming interface
 * @export
 */
export const ProgramEnrollmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProgramEnrollmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Unenroll the user from this program. This is simpler than the corresponding function for CourseRunEnrollments; edX doesn\'t really know what programs are so there\'s nothing to process there.
         * @param {number} id Program enrollment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async programEnrollmentsDestroy(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProgramEnrollmentDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.programEnrollmentsDestroy(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProgramEnrollmentsApi.programEnrollmentsDestroy']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Returns a unified set of program and course enrollments for the current user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async programEnrollmentsList(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserProgramEnrollmentDetail>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.programEnrollmentsList(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProgramEnrollmentsApi.programEnrollmentsList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Retrieve a specific program enrollment.
         * @param {number} id Program enrollment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async programEnrollmentsRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProgramEnrollmentDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.programEnrollmentsRetrieve(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProgramEnrollmentsApi.programEnrollmentsRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ProgramEnrollmentsApi - factory interface
 * @export
 */
export const ProgramEnrollmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProgramEnrollmentsApiFp(configuration)
    return {
        /**
         * Unenroll the user from this program. This is simpler than the corresponding function for CourseRunEnrollments; edX doesn\'t really know what programs are so there\'s nothing to process there.
         * @param {ProgramEnrollmentsApiProgramEnrollmentsDestroyRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programEnrollmentsDestroy(requestParameters: ProgramEnrollmentsApiProgramEnrollmentsDestroyRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserProgramEnrollmentDetail> {
            return localVarFp.programEnrollmentsDestroy(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a unified set of program and course enrollments for the current user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programEnrollmentsList(options?: RawAxiosRequestConfig): AxiosPromise<Array<UserProgramEnrollmentDetail>> {
            return localVarFp.programEnrollmentsList(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a specific program enrollment.
         * @param {ProgramEnrollmentsApiProgramEnrollmentsRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programEnrollmentsRetrieve(requestParameters: ProgramEnrollmentsApiProgramEnrollmentsRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserProgramEnrollmentDetail> {
            return localVarFp.programEnrollmentsRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for programEnrollmentsDestroy operation in ProgramEnrollmentsApi.
 * @export
 * @interface ProgramEnrollmentsApiProgramEnrollmentsDestroyRequest
 */
export interface ProgramEnrollmentsApiProgramEnrollmentsDestroyRequest {
    /**
     * Program enrollment ID
     * @type {number}
     * @memberof ProgramEnrollmentsApiProgramEnrollmentsDestroy
     */
    readonly id: number
}

/**
 * Request parameters for programEnrollmentsRetrieve operation in ProgramEnrollmentsApi.
 * @export
 * @interface ProgramEnrollmentsApiProgramEnrollmentsRetrieveRequest
 */
export interface ProgramEnrollmentsApiProgramEnrollmentsRetrieveRequest {
    /**
     * Program enrollment ID
     * @type {number}
     * @memberof ProgramEnrollmentsApiProgramEnrollmentsRetrieve
     */
    readonly id: number
}

/**
 * ProgramEnrollmentsApi - object-oriented interface
 * @export
 * @class ProgramEnrollmentsApi
 * @extends {BaseAPI}
 */
export class ProgramEnrollmentsApi extends BaseAPI {
    /**
     * Unenroll the user from this program. This is simpler than the corresponding function for CourseRunEnrollments; edX doesn\'t really know what programs are so there\'s nothing to process there.
     * @param {ProgramEnrollmentsApiProgramEnrollmentsDestroyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramEnrollmentsApi
     */
    public programEnrollmentsDestroy(requestParameters: ProgramEnrollmentsApiProgramEnrollmentsDestroyRequest, options?: RawAxiosRequestConfig) {
        return ProgramEnrollmentsApiFp(this.configuration).programEnrollmentsDestroy(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a unified set of program and course enrollments for the current user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramEnrollmentsApi
     */
    public programEnrollmentsList(options?: RawAxiosRequestConfig) {
        return ProgramEnrollmentsApiFp(this.configuration).programEnrollmentsList(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a specific program enrollment.
     * @param {ProgramEnrollmentsApiProgramEnrollmentsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramEnrollmentsApi
     */
    public programEnrollmentsRetrieve(requestParameters: ProgramEnrollmentsApiProgramEnrollmentsRetrieveRequest, options?: RawAxiosRequestConfig) {
        return ProgramEnrollmentsApiFp(this.configuration).programEnrollmentsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProgramsApi - axios parameter creator
 * @export
 */
export const ProgramsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List Programs - v1
         * @param {number} [id] 
         * @param {boolean} [live] 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [page_size] Number of results to return per page.
         * @param {string} [readable_id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsListV1: async (id?: number, live?: boolean, page?: number, page_size?: number, readable_id?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/programs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (live !== undefined) {
                localVarQueryParameter['live'] = live;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }

            if (readable_id !== undefined) {
                localVarQueryParameter['readable_id'] = readable_id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List Programs - v2
         * @param {number} [id] 
         * @param {boolean} [live] 
         * @param {number} [org_id] 
         * @param {number} [page] A page number within the paginated result set.
         * @param {boolean} [page__live] 
         * @param {number} [page_size] Number of results to return per page.
         * @param {string} [readable_id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsListV2: async (id?: number, live?: boolean, org_id?: number, page?: number, page__live?: boolean, page_size?: number, readable_id?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v2/programs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (live !== undefined) {
                localVarQueryParameter['live'] = live;
            }

            if (org_id !== undefined) {
                localVarQueryParameter['org_id'] = org_id;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (page__live !== undefined) {
                localVarQueryParameter['page__live'] = page__live;
            }

            if (page_size !== undefined) {
                localVarQueryParameter['page_size'] = page_size;
            }

            if (readable_id !== undefined) {
                localVarQueryParameter['readable_id'] = readable_id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API view set for Programs - v1
         * @param {number} id A unique integer value identifying this program.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsRetrieveV1: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('programsRetrieveV1', 'id', id)
            const localVarPath = `/api/v1/programs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * API view set for Programs - v2
         * @param {number} id A unique integer value identifying this program.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsRetrieveV2: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('programsRetrieveV2', 'id', id)
            const localVarPath = `/api/v2/programs/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProgramsApi - functional programming interface
 * @export
 */
export const ProgramsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProgramsApiAxiosParamCreator(configuration)
    return {
        /**
         * List Programs - v1
         * @param {number} [id] 
         * @param {boolean} [live] 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [page_size] Number of results to return per page.
         * @param {string} [readable_id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async programsListV1(id?: number, live?: boolean, page?: number, page_size?: number, readable_id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedV1ProgramList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.programsListV1(id, live, page, page_size, readable_id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProgramsApi.programsListV1']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * List Programs - v2
         * @param {number} [id] 
         * @param {boolean} [live] 
         * @param {number} [org_id] 
         * @param {number} [page] A page number within the paginated result set.
         * @param {boolean} [page__live] 
         * @param {number} [page_size] Number of results to return per page.
         * @param {string} [readable_id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async programsListV2(id?: number, live?: boolean, org_id?: number, page?: number, page__live?: boolean, page_size?: number, readable_id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedV2ProgramList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.programsListV2(id, live, org_id, page, page__live, page_size, readable_id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProgramsApi.programsListV2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * API view set for Programs - v1
         * @param {number} id A unique integer value identifying this program.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async programsRetrieveV1(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Program>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.programsRetrieveV1(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProgramsApi.programsRetrieveV1']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * API view set for Programs - v2
         * @param {number} id A unique integer value identifying this program.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async programsRetrieveV2(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V2Program>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.programsRetrieveV2(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['ProgramsApi.programsRetrieveV2']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * ProgramsApi - factory interface
 * @export
 */
export const ProgramsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProgramsApiFp(configuration)
    return {
        /**
         * List Programs - v1
         * @param {ProgramsApiProgramsListV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsListV1(requestParameters: ProgramsApiProgramsListV1Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedV1ProgramList> {
            return localVarFp.programsListV1(requestParameters.id, requestParameters.live, requestParameters.page, requestParameters.page_size, requestParameters.readable_id, options).then((request) => request(axios, basePath));
        },
        /**
         * List Programs - v2
         * @param {ProgramsApiProgramsListV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsListV2(requestParameters: ProgramsApiProgramsListV2Request = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedV2ProgramList> {
            return localVarFp.programsListV2(requestParameters.id, requestParameters.live, requestParameters.org_id, requestParameters.page, requestParameters.page__live, requestParameters.page_size, requestParameters.readable_id, options).then((request) => request(axios, basePath));
        },
        /**
         * API view set for Programs - v1
         * @param {ProgramsApiProgramsRetrieveV1Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsRetrieveV1(requestParameters: ProgramsApiProgramsRetrieveV1Request, options?: RawAxiosRequestConfig): AxiosPromise<V1Program> {
            return localVarFp.programsRetrieveV1(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * API view set for Programs - v2
         * @param {ProgramsApiProgramsRetrieveV2Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        programsRetrieveV2(requestParameters: ProgramsApiProgramsRetrieveV2Request, options?: RawAxiosRequestConfig): AxiosPromise<V2Program> {
            return localVarFp.programsRetrieveV2(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for programsListV1 operation in ProgramsApi.
 * @export
 * @interface ProgramsApiProgramsListV1Request
 */
export interface ProgramsApiProgramsListV1Request {
    /**
     * 
     * @type {number}
     * @memberof ProgramsApiProgramsListV1
     */
    readonly id?: number

    /**
     * 
     * @type {boolean}
     * @memberof ProgramsApiProgramsListV1
     */
    readonly live?: boolean

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof ProgramsApiProgramsListV1
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof ProgramsApiProgramsListV1
     */
    readonly page_size?: number

    /**
     * 
     * @type {string}
     * @memberof ProgramsApiProgramsListV1
     */
    readonly readable_id?: string
}

/**
 * Request parameters for programsListV2 operation in ProgramsApi.
 * @export
 * @interface ProgramsApiProgramsListV2Request
 */
export interface ProgramsApiProgramsListV2Request {
    /**
     * 
     * @type {number}
     * @memberof ProgramsApiProgramsListV2
     */
    readonly id?: number

    /**
     * 
     * @type {boolean}
     * @memberof ProgramsApiProgramsListV2
     */
    readonly live?: boolean

    /**
     * 
     * @type {number}
     * @memberof ProgramsApiProgramsListV2
     */
    readonly org_id?: number

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof ProgramsApiProgramsListV2
     */
    readonly page?: number

    /**
     * 
     * @type {boolean}
     * @memberof ProgramsApiProgramsListV2
     */
    readonly page__live?: boolean

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof ProgramsApiProgramsListV2
     */
    readonly page_size?: number

    /**
     * 
     * @type {string}
     * @memberof ProgramsApiProgramsListV2
     */
    readonly readable_id?: string
}

/**
 * Request parameters for programsRetrieveV1 operation in ProgramsApi.
 * @export
 * @interface ProgramsApiProgramsRetrieveV1Request
 */
export interface ProgramsApiProgramsRetrieveV1Request {
    /**
     * A unique integer value identifying this program.
     * @type {number}
     * @memberof ProgramsApiProgramsRetrieveV1
     */
    readonly id: number
}

/**
 * Request parameters for programsRetrieveV2 operation in ProgramsApi.
 * @export
 * @interface ProgramsApiProgramsRetrieveV2Request
 */
export interface ProgramsApiProgramsRetrieveV2Request {
    /**
     * A unique integer value identifying this program.
     * @type {number}
     * @memberof ProgramsApiProgramsRetrieveV2
     */
    readonly id: number
}

/**
 * ProgramsApi - object-oriented interface
 * @export
 * @class ProgramsApi
 * @extends {BaseAPI}
 */
export class ProgramsApi extends BaseAPI {
    /**
     * List Programs - v1
     * @param {ProgramsApiProgramsListV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    public programsListV1(requestParameters: ProgramsApiProgramsListV1Request = {}, options?: RawAxiosRequestConfig) {
        return ProgramsApiFp(this.configuration).programsListV1(requestParameters.id, requestParameters.live, requestParameters.page, requestParameters.page_size, requestParameters.readable_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List Programs - v2
     * @param {ProgramsApiProgramsListV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    public programsListV2(requestParameters: ProgramsApiProgramsListV2Request = {}, options?: RawAxiosRequestConfig) {
        return ProgramsApiFp(this.configuration).programsListV2(requestParameters.id, requestParameters.live, requestParameters.org_id, requestParameters.page, requestParameters.page__live, requestParameters.page_size, requestParameters.readable_id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API view set for Programs - v1
     * @param {ProgramsApiProgramsRetrieveV1Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    public programsRetrieveV1(requestParameters: ProgramsApiProgramsRetrieveV1Request, options?: RawAxiosRequestConfig) {
        return ProgramsApiFp(this.configuration).programsRetrieveV1(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * API view set for Programs - v2
     * @param {ProgramsApiProgramsRetrieveV2Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProgramsApi
     */
    public programsRetrieveV2(requestParameters: ProgramsApiProgramsRetrieveV2Request, options?: RawAxiosRequestConfig) {
        return ProgramsApiFp(this.configuration).programsRetrieveV2(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserSearchApi - axios parameter creator
 * @export
 */
export const UserSearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Provides an API for listing system users. This is for the staff dashboard.
         * @param {number} [l] Number of results to return per page.
         * @param {number} [o] The initial index from which to return the results.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSearchList: async (l?: number, o?: number, search?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v0/user_search/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (l !== undefined) {
                localVarQueryParameter['l'] = l;
            }

            if (o !== undefined) {
                localVarQueryParameter['o'] = o;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides an API for listing system users. This is for the staff dashboard.
         * @param {number} id A unique integer value identifying this user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSearchRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userSearchRetrieve', 'id', id)
            const localVarPath = `/api/v0/user_search/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserSearchApi - functional programming interface
 * @export
 */
export const UserSearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserSearchApiAxiosParamCreator(configuration)
    return {
        /**
         * Provides an API for listing system users. This is for the staff dashboard.
         * @param {number} [l] Number of results to return per page.
         * @param {number} [o] The initial index from which to return the results.
         * @param {string} [search] A search term.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userSearchList(l?: number, o?: number, search?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedStaffDashboardUserList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userSearchList(l, o, search, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserSearchApi.userSearchList']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * Provides an API for listing system users. This is for the staff dashboard.
         * @param {number} id A unique integer value identifying this user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userSearchRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StaffDashboardUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userSearchRetrieve(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserSearchApi.userSearchRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * UserSearchApi - factory interface
 * @export
 */
export const UserSearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserSearchApiFp(configuration)
    return {
        /**
         * Provides an API for listing system users. This is for the staff dashboard.
         * @param {UserSearchApiUserSearchListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSearchList(requestParameters: UserSearchApiUserSearchListRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PaginatedStaffDashboardUserList> {
            return localVarFp.userSearchList(requestParameters.l, requestParameters.o, requestParameters.search, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides an API for listing system users. This is for the staff dashboard.
         * @param {UserSearchApiUserSearchRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userSearchRetrieve(requestParameters: UserSearchApiUserSearchRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<StaffDashboardUser> {
            return localVarFp.userSearchRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for userSearchList operation in UserSearchApi.
 * @export
 * @interface UserSearchApiUserSearchListRequest
 */
export interface UserSearchApiUserSearchListRequest {
    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof UserSearchApiUserSearchList
     */
    readonly l?: number

    /**
     * The initial index from which to return the results.
     * @type {number}
     * @memberof UserSearchApiUserSearchList
     */
    readonly o?: number

    /**
     * A search term.
     * @type {string}
     * @memberof UserSearchApiUserSearchList
     */
    readonly search?: string
}

/**
 * Request parameters for userSearchRetrieve operation in UserSearchApi.
 * @export
 * @interface UserSearchApiUserSearchRetrieveRequest
 */
export interface UserSearchApiUserSearchRetrieveRequest {
    /**
     * A unique integer value identifying this user.
     * @type {number}
     * @memberof UserSearchApiUserSearchRetrieve
     */
    readonly id: number
}

/**
 * UserSearchApi - object-oriented interface
 * @export
 * @class UserSearchApi
 * @extends {BaseAPI}
 */
export class UserSearchApi extends BaseAPI {
    /**
     * Provides an API for listing system users. This is for the staff dashboard.
     * @param {UserSearchApiUserSearchListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSearchApi
     */
    public userSearchList(requestParameters: UserSearchApiUserSearchListRequest = {}, options?: RawAxiosRequestConfig) {
        return UserSearchApiFp(this.configuration).userSearchList(requestParameters.l, requestParameters.o, requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides an API for listing system users. This is for the staff dashboard.
     * @param {UserSearchApiUserSearchRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserSearchApi
     */
    public userSearchRetrieve(requestParameters: UserSearchApiUserSearchRetrieveRequest, options?: RawAxiosRequestConfig) {
        return UserSearchApiFp(this.configuration).userSearchRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserinfoApi - axios parameter creator
 * @export
 */
export const UserinfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve the current user\'s info only if they have an edx_username, otherwise return 409  This is to prevent issues with Open edX OAuth client that expect an edx_username to be present
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userinfoRetrieve: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v0/userinfo/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserinfoApi - functional programming interface
 * @export
 */
export const UserinfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserinfoApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve the current user\'s info only if they have an edx_username, otherwise return 409  This is to prevent issues with Open edX OAuth client that expect an edx_username to be present
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userinfoRetrieve(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userinfoRetrieve(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UserinfoApi.userinfoRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * UserinfoApi - factory interface
 * @export
 */
export const UserinfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserinfoApiFp(configuration)
    return {
        /**
         * Retrieve the current user\'s info only if they have an edx_username, otherwise return 409  This is to prevent issues with Open edX OAuth client that expect an edx_username to be present
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userinfoRetrieve(options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.userinfoRetrieve(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserinfoApi - object-oriented interface
 * @export
 * @class UserinfoApi
 * @extends {BaseAPI}
 */
export class UserinfoApi extends BaseAPI {
    /**
     * Retrieve the current user\'s info only if they have an edx_username, otherwise return 409  This is to prevent issues with Open edX OAuth client that expect an edx_username to be present
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserinfoApi
     */
    public userinfoRetrieve(options?: RawAxiosRequestConfig) {
        return UserinfoApiFp(this.configuration).userinfoRetrieve(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * User retrieve and update viewsets for the current user
         * @param {PatchedUserRequest} [PatchedUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCurrentUserPartialUpdate: async (PatchedUserRequest?: PatchedUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v0/users/current_user/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PatchedUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * User retrieve and update viewsets for the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCurrentUserRetrieve: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v0/users/current_user/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * User retrieve and update viewsets for the current user
         * @param {PatchedUserRequest} [PatchedUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMePartialUpdate: async (PatchedUserRequest?: PatchedUserRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v0/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(PatchedUserRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * User retrieve and update viewsets for the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeRetrieve: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v0/users/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * User retrieve viewsets
         * @param {number} id A unique integer value identifying this user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRetrieve: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersRetrieve', 'id', id)
            const localVarPath = `/api/v0/users/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * User retrieve and update viewsets for the current user
         * @param {PatchedUserRequest} [PatchedUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersCurrentUserPartialUpdate(PatchedUserRequest?: PatchedUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersCurrentUserPartialUpdate(PatchedUserRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersApi.usersCurrentUserPartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * User retrieve and update viewsets for the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersCurrentUserRetrieve(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersCurrentUserRetrieve(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersApi.usersCurrentUserRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * User retrieve and update viewsets for the current user
         * @param {PatchedUserRequest} [PatchedUserRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersMePartialUpdate(PatchedUserRequest?: PatchedUserRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersMePartialUpdate(PatchedUserRequest, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersApi.usersMePartialUpdate']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * User retrieve and update viewsets for the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersMeRetrieve(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersMeRetrieve(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersApi.usersMeRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * User retrieve viewsets
         * @param {number} id A unique integer value identifying this user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersRetrieve(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublicUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersRetrieve(id, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['UsersApi.usersRetrieve']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * User retrieve and update viewsets for the current user
         * @param {UsersApiUsersCurrentUserPartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCurrentUserPartialUpdate(requestParameters: UsersApiUsersCurrentUserPartialUpdateRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.usersCurrentUserPartialUpdate(requestParameters.PatchedUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * User retrieve and update viewsets for the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersCurrentUserRetrieve(options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.usersCurrentUserRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * User retrieve and update viewsets for the current user
         * @param {UsersApiUsersMePartialUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMePartialUpdate(requestParameters: UsersApiUsersMePartialUpdateRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.usersMePartialUpdate(requestParameters.PatchedUserRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * User retrieve and update viewsets for the current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersMeRetrieve(options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.usersMeRetrieve(options).then((request) => request(axios, basePath));
        },
        /**
         * User retrieve viewsets
         * @param {UsersApiUsersRetrieveRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersRetrieve(requestParameters: UsersApiUsersRetrieveRequest, options?: RawAxiosRequestConfig): AxiosPromise<PublicUser> {
            return localVarFp.usersRetrieve(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for usersCurrentUserPartialUpdate operation in UsersApi.
 * @export
 * @interface UsersApiUsersCurrentUserPartialUpdateRequest
 */
export interface UsersApiUsersCurrentUserPartialUpdateRequest {
    /**
     * 
     * @type {PatchedUserRequest}
     * @memberof UsersApiUsersCurrentUserPartialUpdate
     */
    readonly PatchedUserRequest?: PatchedUserRequest
}

/**
 * Request parameters for usersMePartialUpdate operation in UsersApi.
 * @export
 * @interface UsersApiUsersMePartialUpdateRequest
 */
export interface UsersApiUsersMePartialUpdateRequest {
    /**
     * 
     * @type {PatchedUserRequest}
     * @memberof UsersApiUsersMePartialUpdate
     */
    readonly PatchedUserRequest?: PatchedUserRequest
}

/**
 * Request parameters for usersRetrieve operation in UsersApi.
 * @export
 * @interface UsersApiUsersRetrieveRequest
 */
export interface UsersApiUsersRetrieveRequest {
    /**
     * A unique integer value identifying this user.
     * @type {number}
     * @memberof UsersApiUsersRetrieve
     */
    readonly id: number
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * User retrieve and update viewsets for the current user
     * @param {UsersApiUsersCurrentUserPartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersCurrentUserPartialUpdate(requestParameters: UsersApiUsersCurrentUserPartialUpdateRequest = {}, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersCurrentUserPartialUpdate(requestParameters.PatchedUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * User retrieve and update viewsets for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersCurrentUserRetrieve(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersCurrentUserRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * User retrieve and update viewsets for the current user
     * @param {UsersApiUsersMePartialUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersMePartialUpdate(requestParameters: UsersApiUsersMePartialUpdateRequest = {}, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersMePartialUpdate(requestParameters.PatchedUserRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * User retrieve and update viewsets for the current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersMeRetrieve(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersMeRetrieve(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * User retrieve viewsets
     * @param {UsersApiUsersRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersRetrieve(requestParameters: UsersApiUsersRetrieveRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



